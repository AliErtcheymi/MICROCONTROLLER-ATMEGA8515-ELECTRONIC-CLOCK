
clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  00000d3a  00000dce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  008000be  008000be  00000e2c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  0000158f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000137  00000000  00000000  000015af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000063a  00000000  00000000  000016e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000208  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b65  00000000  00000000  00001f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d0  00000000  00000000  00002a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001c7  00000000  00000000  00002b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000036b  00000000  00000000  00002d27  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  00003092  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  000030ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c c0       	rjmp	.+24     	; 0x1a <__ctors_end>
   2:	27 c0       	rjmp	.+78     	; 0x52 <__bad_interrupt>
   4:	26 c0       	rjmp	.+76     	; 0x52 <__bad_interrupt>
   6:	25 c0       	rjmp	.+74     	; 0x52 <__bad_interrupt>
   8:	24 c0       	rjmp	.+72     	; 0x52 <__bad_interrupt>
   a:	23 c0       	rjmp	.+70     	; 0x52 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__vector_6>
   e:	21 c0       	rjmp	.+66     	; 0x52 <__bad_interrupt>
  10:	20 c0       	rjmp	.+64     	; 0x52 <__bad_interrupt>
  12:	1f c0       	rjmp	.+62     	; 0x52 <__bad_interrupt>
  14:	1e c0       	rjmp	.+60     	; 0x52 <__bad_interrupt>
  16:	1d c0       	rjmp	.+58     	; 0x52 <__bad_interrupt>
  18:	1c c0       	rjmp	.+56     	; 0x52 <__bad_interrupt>

0000001a <__ctors_end>:
  1a:	11 24       	eor	r1, r1
  1c:	1f be       	out	0x3f, r1	; 63
  1e:	cf e5       	ldi	r28, 0x5F	; 95
  20:	d2 e0       	ldi	r29, 0x02	; 2
  22:	de bf       	out	0x3e, r29	; 62
  24:	cd bf       	out	0x3d, r28	; 61

00000026 <__do_copy_data>:
  26:	10 e0       	ldi	r17, 0x00	; 0
  28:	a0 e6       	ldi	r26, 0x60	; 96
  2a:	b0 e0       	ldi	r27, 0x00	; 0
  2c:	ea e3       	ldi	r30, 0x3A	; 58
  2e:	fd e0       	ldi	r31, 0x0D	; 13
  30:	03 c0       	rjmp	.+6      	; 0x38 <__CCP__+0x4>
  32:	c8 95       	lpm
  34:	31 96       	adiw	r30, 0x01	; 1
  36:	0d 92       	st	X+, r0
  38:	ae 3b       	cpi	r26, 0xBE	; 190
  3a:	b1 07       	cpc	r27, r17
  3c:	d1 f7       	brne	.-12     	; 0x32 <__do_copy_data+0xc>

0000003e <__do_clear_bss>:
  3e:	10 e0       	ldi	r17, 0x00	; 0
  40:	ae eb       	ldi	r26, 0xBE	; 190
  42:	b0 e0       	ldi	r27, 0x00	; 0
  44:	01 c0       	rjmp	.+2      	; 0x48 <.do_clear_bss_start>

00000046 <.do_clear_bss_loop>:
  46:	1d 92       	st	X+, r1

00000048 <.do_clear_bss_start>:
  48:	ae 3d       	cpi	r26, 0xDE	; 222
  4a:	b1 07       	cpc	r27, r17
  4c:	e1 f7       	brne	.-8      	; 0x46 <.do_clear_bss_loop>
  4e:	90 d2       	rcall	.+1312   	; 0x570 <main>
  50:	72 c6       	rjmp	.+3300   	; 0xd36 <_exit>

00000052 <__bad_interrupt>:
  52:	d6 cf       	rjmp	.-84     	; 0x0 <__vectors>

00000054 <__vector_6>:
int poyas=0;
void send_a_command(unsigned char command);
void send_a_character(unsigned char character);

// function that describes timer interrupt, when occurs, seconds are being incremented and so the time
ISR(TIMER1_OVF_vect) {
  54:	1f 92       	push	r1
  56:	0f 92       	push	r0
  58:	0f b6       	in	r0, 0x3f	; 63
  5a:	0f 92       	push	r0
  5c:	11 24       	eor	r1, r1
  5e:	2f 93       	push	r18
  60:	3f 93       	push	r19
  62:	4f 93       	push	r20
  64:	5f 93       	push	r21
  66:	6f 93       	push	r22
  68:	7f 93       	push	r23
  6a:	8f 93       	push	r24
  6c:	9f 93       	push	r25
  6e:	af 93       	push	r26
  70:	bf 93       	push	r27
  72:	ef 93       	push	r30
  74:	ff 93       	push	r31
	TCNT1=57724;  // 57724;  //65536 - 1 c * 8.000.000 / 1024
  76:	8c e7       	ldi	r24, 0x7C	; 124
  78:	91 ee       	ldi	r25, 0xE1	; 225
  7a:	9d bd       	out	0x2d, r25	; 45
  7c:	8c bd       	out	0x2c, r24	; 44
	second++;
  7e:	80 91 c4 00 	lds	r24, 0x00C4
  82:	90 91 c5 00 	lds	r25, 0x00C5
  86:	01 96       	adiw	r24, 0x01	; 1
  88:	90 93 c5 00 	sts	0x00C5, r25
  8c:	80 93 c4 00 	sts	0x00C4, r24
	if (second==60) {
  90:	8c 33       	cpi	r24, 0x3C	; 60
  92:	91 05       	cpc	r25, r1
  94:	09 f0       	breq	.+2      	; 0x98 <__vector_6+0x44>
  96:	54 c0       	rjmp	.+168    	; 0x140 <__vector_6+0xec>
		second=0;
  98:	10 92 c5 00 	sts	0x00C5, r1
  9c:	10 92 c4 00 	sts	0x00C4, r1
		minute++;
  a0:	80 91 c2 00 	lds	r24, 0x00C2
  a4:	90 91 c3 00 	lds	r25, 0x00C3
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	90 93 c3 00 	sts	0x00C3, r25
  ae:	80 93 c2 00 	sts	0x00C2, r24
		if (minute==60) {
  b2:	8c 33       	cpi	r24, 0x3C	; 60
  b4:	91 05       	cpc	r25, r1
  b6:	a1 f4       	brne	.+40     	; 0xe0 <__vector_6+0x8c>
			minute=0;
  b8:	10 92 c3 00 	sts	0x00C3, r1
  bc:	10 92 c2 00 	sts	0x00C2, r1
			hour++;
  c0:	80 91 c0 00 	lds	r24, 0x00C0
  c4:	90 91 c1 00 	lds	r25, 0x00C1
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	90 93 c1 00 	sts	0x00C1, r25
  ce:	80 93 c0 00 	sts	0x00C0, r24
			if (hour==24) hour=0;
  d2:	88 31       	cpi	r24, 0x18	; 24
  d4:	91 05       	cpc	r25, r1
  d6:	21 f4       	brne	.+8      	; 0xe0 <__vector_6+0x8c>
  d8:	10 92 c1 00 	sts	0x00C1, r1
  dc:	10 92 c0 00 	sts	0x00C0, r1
		}
		if (!flag) DRAW(timezone[2*poyas],timezone[2*poyas+1],(hour+time_difference[poyas])%24);
  e0:	80 91 be 00 	lds	r24, 0x00BE
  e4:	90 91 bf 00 	lds	r25, 0x00BF
  e8:	00 97       	sbiw	r24, 0x00	; 0
  ea:	51 f5       	brne	.+84     	; 0x140 <__vector_6+0xec>
  ec:	80 91 c6 00 	lds	r24, 0x00C6
  f0:	90 91 c7 00 	lds	r25, 0x00C7
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	e8 2f       	mov	r30, r24
  fa:	f9 2f       	mov	r31, r25
  fc:	ee 0f       	add	r30, r30
  fe:	ff 1f       	adc	r31, r31
 100:	e5 55       	subi	r30, 0x55	; 85
 102:	ff 4f       	sbci	r31, 0xFF	; 255
 104:	a8 2f       	mov	r26, r24
 106:	b9 2f       	mov	r27, r25
 108:	aa 0f       	add	r26, r26
 10a:	bb 1f       	adc	r27, r27
 10c:	a3 55       	subi	r26, 0x53	; 83
 10e:	bf 4f       	sbci	r27, 0xFF	; 255
 110:	2d 91       	ld	r18, X+
 112:	3c 91       	ld	r19, X
 114:	8a 52       	subi	r24, 0x2A	; 42
 116:	9f 4f       	sbci	r25, 0xFF	; 255
 118:	a8 2f       	mov	r26, r24
 11a:	b9 2f       	mov	r27, r25
 11c:	8d 91       	ld	r24, X+
 11e:	9c 91       	ld	r25, X
 120:	40 91 c0 00 	lds	r20, 0x00C0
 124:	50 91 c1 00 	lds	r21, 0x00C1
 128:	84 0f       	add	r24, r20
 12a:	95 1f       	adc	r25, r21
 12c:	68 e1       	ldi	r22, 0x18	; 24
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	d9 d5       	rcall	.+2994   	; 0xce4 <__divmodhi4>
 132:	48 2f       	mov	r20, r24
 134:	59 2f       	mov	r21, r25
 136:	80 81       	ld	r24, Z
 138:	91 81       	ldd	r25, Z+1	; 0x01
 13a:	62 2f       	mov	r22, r18
 13c:	73 2f       	mov	r23, r19
 13e:	4a d0       	rcall	.+148    	; 0x1d4 <DRAW>
	}
}
 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	bf 91       	pop	r27
 146:	af 91       	pop	r26
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	7f 91       	pop	r23
 14e:	6f 91       	pop	r22
 150:	5f 91       	pop	r21
 152:	4f 91       	pop	r20
 154:	3f 91       	pop	r19
 156:	2f 91       	pop	r18
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <timer_init>:

// T1 initialization commands to overflow every second
void timer_init() {
	TCCR1A=0;
 162:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=5;
 164:	85 e0       	ldi	r24, 0x05	; 5
 166:	8e bd       	out	0x2e, r24	; 46
	TCNT1=57724;  // 57724;
 168:	8c e7       	ldi	r24, 0x7C	; 124
 16a:	91 ee       	ldi	r25, 0xE1	; 225
 16c:	9d bd       	out	0x2d, r25	; 45
 16e:	8c bd       	out	0x2c, r24	; 44
	TIFR=0;
 170:	18 be       	out	0x38, r1	; 56
	TIMSK=0x80;  // allows T1 interrupt
 172:	80 e8       	ldi	r24, 0x80	; 128
 174:	89 bf       	out	0x39, r24	; 57
	sei();
 176:	78 94       	sei
}
 178:	08 95       	ret

0000017a <uart_init>:
// uart initialization commands with the speed 9600 bod
void uart_init(void) {
	UBRR=51;
 17a:	83 e3       	ldi	r24, 0x33	; 51
 17c:	89 b9       	out	0x09, r24	; 9
	UCR=(1<<TXEN)|(1<<RXEN);
 17e:	88 e1       	ldi	r24, 0x18	; 24
 180:	8a b9       	out	0x0a, r24	; 10
}
 182:	08 95       	ret

00000184 <uart_puts>:

// send a string via uart to IBM
void uart_puts(char *str) {
 184:	e8 2f       	mov	r30, r24
 186:	f9 2f       	mov	r31, r25
	unsigned char c;
	while((c=*str++)!=0) {
 188:	03 c0       	rjmp	.+6      	; 0x190 <uart_puts+0xc>
		while ((USR&(1<<UDRE))==0);
 18a:	5d 9b       	sbis	0x0b, 5	; 11
 18c:	fe cf       	rjmp	.-4      	; 0x18a <uart_puts+0x6>
		UDR=c;
 18e:	8c b9       	out	0x0c, r24	; 12
}

// send a string via uart to IBM
void uart_puts(char *str) {
	unsigned char c;
	while((c=*str++)!=0) {
 190:	81 91       	ld	r24, Z+
 192:	88 23       	and	r24, r24
 194:	d1 f7       	brne	.-12     	; 0x18a <uart_puts+0x6>
		while ((USR&(1<<UDRE))==0);
		UDR=c;
	}
}
 196:	08 95       	ret

00000198 <send_a_command>:

// send a certain command to display to manage its options
void send_a_command (unsigned char command) {
    PORTB=command;
 198:	88 bb       	out	0x18, r24	; 24
    PORTD&= ~(1<<RS);
 19a:	96 98       	cbi	0x12, 6	; 18
    PORTD|= (1<<E);
 19c:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	8f e7       	ldi	r24, 0x7F	; 127
 1a0:	98 e3       	ldi	r25, 0x38	; 56
 1a2:	a1 e0       	ldi	r26, 0x01	; 1
 1a4:	81 50       	subi	r24, 0x01	; 1
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	a0 40       	sbci	r26, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <send_a_command+0xc>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <send_a_command+0x16>
 1ae:	00 00       	nop
    _delay_ms(50);
    PORTD&= ~(1<<E);
 1b0:	95 98       	cbi	0x12, 5	; 18
    PORTB =0;
 1b2:	18 ba       	out	0x18, r1	; 24
}
 1b4:	08 95       	ret

000001b6 <send_a_character>:

// display one character on lcd
void send_a_character (unsigned char character) {
    PORTB=character;
 1b6:	88 bb       	out	0x18, r24	; 24
    PORTD|= (1<<RS);
 1b8:	96 9a       	sbi	0x12, 6	; 18
    PORTD|= (1<<E);
 1ba:	95 9a       	sbi	0x12, 5	; 18
 1bc:	8f e7       	ldi	r24, 0x7F	; 127
 1be:	98 e3       	ldi	r25, 0x38	; 56
 1c0:	a1 e0       	ldi	r26, 0x01	; 1
 1c2:	81 50       	subi	r24, 0x01	; 1
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	a0 40       	sbci	r26, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <send_a_character+0xc>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <send_a_character+0x16>
 1cc:	00 00       	nop
    _delay_ms(50);
    PORTD&= ~(1<<E);
 1ce:	95 98       	cbi	0x12, 5	; 18
    PORTB =0;
 1d0:	18 ba       	out	0x18, r1	; 24
}
 1d2:	08 95       	ret

000001d4 <DRAW>:
    send_a_command(0x38);  // rezhim 16x2
    send_a_command(0x0C);  // vklyuchit ekran 0C - no cursor 0D - black rectangle blink 0E - underline 0F - 0D + 0E
}

// procedure to display time as NN:HH:MM
void DRAW(char first, char second, int hour1) {
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	df 93       	push	r29
 1de:	cf 93       	push	r28
 1e0:	0f 92       	push	r0
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	f8 2e       	mov	r15, r24
 1e8:	04 2f       	mov	r16, r20
 1ea:	15 2f       	mov	r17, r21
	send_a_command(0x01);
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	69 83       	std	Y+1, r22	; 0x01
 1f0:	d3 df       	rcall	.-90     	; 0x198 <send_a_command>
	send_a_command(0x0C);
 1f2:	8c e0       	ldi	r24, 0x0C	; 12
 1f4:	d1 df       	rcall	.-94     	; 0x198 <send_a_command>
	send_a_character(first);
 1f6:	8f 2d       	mov	r24, r15
 1f8:	de df       	rcall	.-68     	; 0x1b6 <send_a_character>
	send_a_character(second);
 1fa:	69 81       	ldd	r22, Y+1	; 0x01
 1fc:	86 2f       	mov	r24, r22
 1fe:	db df       	rcall	.-74     	; 0x1b6 <send_a_character>
	send_a_character(45);
 200:	8d e2       	ldi	r24, 0x2D	; 45
 202:	d9 df       	rcall	.-78     	; 0x1b6 <send_a_character>
	send_a_character(numbers+hour1/10);
 204:	5a e0       	ldi	r21, 0x0A	; 10
 206:	e5 2e       	mov	r14, r21
 208:	f1 2c       	mov	r15, r1
 20a:	80 2f       	mov	r24, r16
 20c:	91 2f       	mov	r25, r17
 20e:	6e 2d       	mov	r22, r14
 210:	7f 2d       	mov	r23, r15
 212:	68 d5       	rcall	.+2768   	; 0xce4 <__divmodhi4>
 214:	08 2f       	mov	r16, r24
 216:	80 91 bb 00 	lds	r24, 0x00BB
 21a:	86 0f       	add	r24, r22
 21c:	cc df       	rcall	.-104    	; 0x1b6 <send_a_character>
	send_a_character(numbers+hour1%10);
 21e:	80 91 bb 00 	lds	r24, 0x00BB
 222:	80 0f       	add	r24, r16
 224:	c8 df       	rcall	.-112    	; 0x1b6 <send_a_character>
	send_a_character(45);
 226:	8d e2       	ldi	r24, 0x2D	; 45
 228:	c6 df       	rcall	.-116    	; 0x1b6 <send_a_character>
	send_a_character(numbers+minute/10);
 22a:	80 91 c2 00 	lds	r24, 0x00C2
 22e:	90 91 c3 00 	lds	r25, 0x00C3
 232:	6e 2d       	mov	r22, r14
 234:	7f 2d       	mov	r23, r15
 236:	56 d5       	rcall	.+2732   	; 0xce4 <__divmodhi4>
 238:	80 91 bb 00 	lds	r24, 0x00BB
 23c:	86 0f       	add	r24, r22
 23e:	bb df       	rcall	.-138    	; 0x1b6 <send_a_character>
	send_a_character(numbers+minute%10);
 240:	80 91 c2 00 	lds	r24, 0x00C2
 244:	90 91 c3 00 	lds	r25, 0x00C3
 248:	6e 2d       	mov	r22, r14
 24a:	7f 2d       	mov	r23, r15
 24c:	4b d5       	rcall	.+2710   	; 0xce4 <__divmodhi4>
 24e:	90 91 bb 00 	lds	r25, 0x00BB
 252:	89 0f       	add	r24, r25
 254:	b0 df       	rcall	.-160    	; 0x1b6 <send_a_character>
}
 256:	0f 90       	pop	r0
 258:	cf 91       	pop	r28
 25a:	df 91       	pop	r29
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	ff 90       	pop	r15
 262:	ef 90       	pop	r14
 264:	08 95       	ret

00000266 <clrscr>:
    PORTB =0;
}

// a set of commands to clear the display
void clrscr(void) {
	send_a_command(0x01);  // komanda ochistit ekran
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	97 df       	rcall	.-210    	; 0x198 <send_a_command>
    send_a_command(0x38);  // rezhim 16x2
 26a:	88 e3       	ldi	r24, 0x38	; 56
 26c:	95 df       	rcall	.-214    	; 0x198 <send_a_command>
    send_a_command(0x0C);  // vklyuchit ekran 0C - no cursor 0D - black rectangle blink 0E - underline 0F - 0D + 0E
 26e:	8c e0       	ldi	r24, 0x0C	; 12
 270:	93 df       	rcall	.-218    	; 0x198 <send_a_command>
}
 272:	08 95       	ret

00000274 <calc>:
	send_a_character(numbers+minute%10);
}

// just a function to calculate cursor shift (when it has to skip ":" in HH:MM)
int calc(int pos) {
	if (pos<2) return 5-pos; 
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	91 05       	cpc	r25, r1
 278:	1c f4       	brge	.+6      	; 0x280 <calc+0xc>
 27a:	25 e0       	ldi	r18, 0x05	; 5
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <calc+0x10>
	else return 4-pos;
 280:	24 e0       	ldi	r18, 0x04	; 4
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	28 1b       	sub	r18, r24
 286:	39 0b       	sbc	r19, r25
}
 288:	82 2f       	mov	r24, r18
 28a:	93 2f       	mov	r25, r19
 28c:	08 95       	ret

0000028e <calc2>:

// just a function to calculate cursor shift (when it has to skip ":" in NN:HH)
int calc2(int pos) {
	if (pos<2) return 8-pos; 
 28e:	82 30       	cpi	r24, 0x02	; 2
 290:	91 05       	cpc	r25, r1
 292:	1c f4       	brge	.+6      	; 0x29a <calc2+0xc>
 294:	28 e0       	ldi	r18, 0x08	; 8
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <calc2+0x10>
	else return 6-pos;
 29a:	26 e0       	ldi	r18, 0x06	; 6
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	28 1b       	sub	r18, r24
 2a0:	39 0b       	sbc	r19, r25
}
 2a2:	82 2f       	mov	r24, r18
 2a4:	93 2f       	mov	r25, r19
 2a6:	08 95       	ret

000002a8 <time_editor>:

// procedure to enter time poyases edit mode
// inside you can change the name and current time in NN:HH to change previous poyas to a new one
void time_editor(void) {
 2a8:	af 92       	push	r10
 2aa:	bf 92       	push	r11
 2ac:	cf 92       	push	r12
 2ae:	df 92       	push	r13
 2b0:	ef 92       	push	r14
 2b2:	ff 92       	push	r15
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
	flag=1;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	90 93 bf 00 	sts	0x00BF, r25
 2c4:	80 93 be 00 	sts	0x00BE, r24
	pos=0;
 2c8:	10 92 c9 00 	sts	0x00C9, r1
 2cc:	10 92 c8 00 	sts	0x00C8, r1
	send_a_command(0x0D);  // enable the cursor
 2d0:	8d e0       	ldi	r24, 0x0D	; 13
 2d2:	62 df       	rcall	.-316    	; 0x198 <send_a_command>
	DRAW(timezone[2*poyas],timezone[2*poyas+1],(hour+time_difference[poyas])%24);  // draw the time
 2d4:	80 91 c6 00 	lds	r24, 0x00C6
 2d8:	90 91 c7 00 	lds	r25, 0x00C7
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	c8 2f       	mov	r28, r24
 2e2:	d9 2f       	mov	r29, r25
 2e4:	cc 0f       	add	r28, r28
 2e6:	dd 1f       	adc	r29, r29
 2e8:	c5 55       	subi	r28, 0x55	; 85
 2ea:	df 4f       	sbci	r29, 0xFF	; 255
 2ec:	e8 2f       	mov	r30, r24
 2ee:	f9 2f       	mov	r31, r25
 2f0:	ee 0f       	add	r30, r30
 2f2:	ff 1f       	adc	r31, r31
 2f4:	e3 55       	subi	r30, 0x53	; 83
 2f6:	ff 4f       	sbci	r31, 0xFF	; 255
 2f8:	8a 52       	subi	r24, 0x2A	; 42
 2fa:	9f 4f       	sbci	r25, 0xFF	; 255
 2fc:	a8 2f       	mov	r26, r24
 2fe:	b9 2f       	mov	r27, r25
 300:	8d 91       	ld	r24, X+
 302:	9c 91       	ld	r25, X
 304:	20 91 c0 00 	lds	r18, 0x00C0
 308:	30 91 c1 00 	lds	r19, 0x00C1
 30c:	82 0f       	add	r24, r18
 30e:	93 1f       	adc	r25, r19
 310:	68 e1       	ldi	r22, 0x18	; 24
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	e7 d4       	rcall	.+2510   	; 0xce4 <__divmodhi4>
 316:	48 2f       	mov	r20, r24
 318:	59 2f       	mov	r21, r25
 31a:	88 81       	ld	r24, Y
 31c:	60 81       	ld	r22, Z
 31e:	5a df       	rcall	.-332    	; 0x1d4 <DRAW>
	send_a_command(0x0D);
 320:	8d e0       	ldi	r24, 0x0D	; 13
 322:	3a df       	rcall	.-396    	; 0x198 <send_a_command>
 324:	c8 e0       	ldi	r28, 0x08	; 8
 326:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0;i<8;i++)
		send_a_command(0x10);  //cursor is on first letter
 328:	80 e1       	ldi	r24, 0x10	; 16
 32a:	36 df       	rcall	.-404    	; 0x198 <send_a_command>
 32c:	21 97       	sbiw	r28, 0x01	; 1
	flag=1;
	pos=0;
	send_a_command(0x0D);  // enable the cursor
	DRAW(timezone[2*poyas],timezone[2*poyas+1],(hour+time_difference[poyas])%24);  // draw the time
	send_a_command(0x0D);
	for (int i=0;i<8;i++)
 32e:	e1 f7       	brne	.-8      	; 0x328 <time_editor+0x80>
 330:	fd c0       	rjmp	.+506    	; 0x52c <time_editor+0x284>
		send_a_command(0x10);  //cursor is on first letter
	while (pos!=3) {
		if (!(PINA&0b00000001)) {  // UP
 332:	c8 99       	sbic	0x19, 0	; 25
 334:	66 c0       	rjmp	.+204    	; 0x402 <time_editor+0x15a>
			while (!(PINA&0b00000001));
 336:	c8 9b       	sbis	0x19, 0	; 25
 338:	fe cf       	rjmp	.-4      	; 0x336 <time_editor+0x8e>
			if (pos<2) {
 33a:	82 30       	cpi	r24, 0x02	; 2
 33c:	91 05       	cpc	r25, r1
 33e:	bc f4       	brge	.+46     	; 0x36e <time_editor+0xc6>
				timezone[2*poyas+pos]++;
 340:	e0 91 c6 00 	lds	r30, 0x00C6
 344:	f0 91 c7 00 	lds	r31, 0x00C7
 348:	ee 0f       	add	r30, r30
 34a:	ff 1f       	adc	r31, r31
 34c:	e8 0f       	add	r30, r24
 34e:	f9 1f       	adc	r31, r25
 350:	ee 0f       	add	r30, r30
 352:	ff 1f       	adc	r31, r31
 354:	e5 55       	subi	r30, 0x55	; 85
 356:	ff 4f       	sbci	r31, 0xFF	; 255
 358:	80 81       	ld	r24, Z
 35a:	91 81       	ldd	r25, Z+1	; 0x01
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	91 83       	std	Z+1, r25	; 0x01
 360:	80 83       	st	Z, r24
				if (timezone[2*poyas+pos]=='Z'+1) timezone[2*poyas+pos]='A';
 362:	8b 35       	cpi	r24, 0x5B	; 91
 364:	91 05       	cpc	r25, r1
 366:	b1 f4       	brne	.+44     	; 0x394 <time_editor+0xec>
 368:	f1 82       	std	Z+1, r15	; 0x01
 36a:	e0 82       	st	Z, r14
 36c:	13 c0       	rjmp	.+38     	; 0x394 <time_editor+0xec>
			}
			if (pos==2)	time_difference[poyas]=(time_difference[poyas]+1)%24;
 36e:	82 30       	cpi	r24, 0x02	; 2
 370:	91 05       	cpc	r25, r1
 372:	81 f4       	brne	.+32     	; 0x394 <time_editor+0xec>
 374:	e0 91 c6 00 	lds	r30, 0x00C6
 378:	f0 91 c7 00 	lds	r31, 0x00C7
 37c:	ee 0f       	add	r30, r30
 37e:	ff 1f       	adc	r31, r31
 380:	ea 52       	subi	r30, 0x2A	; 42
 382:	ff 4f       	sbci	r31, 0xFF	; 255
 384:	80 81       	ld	r24, Z
 386:	91 81       	ldd	r25, Z+1	; 0x01
 388:	01 96       	adiw	r24, 0x01	; 1
 38a:	60 2f       	mov	r22, r16
 38c:	71 2f       	mov	r23, r17
 38e:	aa d4       	rcall	.+2388   	; 0xce4 <__divmodhi4>
 390:	91 83       	std	Z+1, r25	; 0x01
 392:	80 83       	st	Z, r24
			DRAW(timezone[2*poyas],timezone[2*poyas+1],(hour+time_difference[poyas])%24);
 394:	80 91 c6 00 	lds	r24, 0x00C6
 398:	90 91 c7 00 	lds	r25, 0x00C7
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	c8 2f       	mov	r28, r24
 3a2:	d9 2f       	mov	r29, r25
 3a4:	cc 0f       	add	r28, r28
 3a6:	dd 1f       	adc	r29, r29
 3a8:	c5 55       	subi	r28, 0x55	; 85
 3aa:	df 4f       	sbci	r29, 0xFF	; 255
 3ac:	e8 2f       	mov	r30, r24
 3ae:	f9 2f       	mov	r31, r25
 3b0:	ee 0f       	add	r30, r30
 3b2:	ff 1f       	adc	r31, r31
 3b4:	e3 55       	subi	r30, 0x53	; 83
 3b6:	ff 4f       	sbci	r31, 0xFF	; 255
 3b8:	8a 52       	subi	r24, 0x2A	; 42
 3ba:	9f 4f       	sbci	r25, 0xFF	; 255
 3bc:	a8 2f       	mov	r26, r24
 3be:	b9 2f       	mov	r27, r25
 3c0:	8d 91       	ld	r24, X+
 3c2:	9c 91       	ld	r25, X
 3c4:	20 91 c0 00 	lds	r18, 0x00C0
 3c8:	30 91 c1 00 	lds	r19, 0x00C1
 3cc:	82 0f       	add	r24, r18
 3ce:	93 1f       	adc	r25, r19
 3d0:	60 2f       	mov	r22, r16
 3d2:	71 2f       	mov	r23, r17
 3d4:	87 d4       	rcall	.+2318   	; 0xce4 <__divmodhi4>
 3d6:	48 2f       	mov	r20, r24
 3d8:	59 2f       	mov	r21, r25
 3da:	88 81       	ld	r24, Y
 3dc:	60 81       	ld	r22, Z
 3de:	fa de       	rcall	.-524    	; 0x1d4 <DRAW>
			send_a_command(0x0D);
 3e0:	8d e0       	ldi	r24, 0x0D	; 13
 3e2:	da de       	rcall	.-588    	; 0x198 <send_a_command>
			for (int i=0;i<calc2(pos);i++)
 3e4:	c0 e0       	ldi	r28, 0x00	; 0
 3e6:	d0 e0       	ldi	r29, 0x00	; 0
 3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <time_editor+0x148>
				send_a_command(0x10);  // move cursor to 1st hour digit
 3ea:	80 e1       	ldi	r24, 0x10	; 16
 3ec:	d5 de       	rcall	.-598    	; 0x198 <send_a_command>
				if (timezone[2*poyas+pos]=='Z'+1) timezone[2*poyas+pos]='A';
			}
			if (pos==2)	time_difference[poyas]=(time_difference[poyas]+1)%24;
			DRAW(timezone[2*poyas],timezone[2*poyas+1],(hour+time_difference[poyas])%24);
			send_a_command(0x0D);
			for (int i=0;i<calc2(pos);i++)
 3ee:	21 96       	adiw	r28, 0x01	; 1
 3f0:	80 91 c8 00 	lds	r24, 0x00C8
 3f4:	90 91 c9 00 	lds	r25, 0x00C9
 3f8:	4a df       	rcall	.-364    	; 0x28e <calc2>
 3fa:	c8 17       	cp	r28, r24
 3fc:	d9 07       	cpc	r29, r25
 3fe:	ac f3       	brlt	.-22     	; 0x3ea <time_editor+0x142>
 400:	a0 c0       	rjmp	.+320    	; 0x542 <time_editor+0x29a>
				send_a_command(0x10);  // move cursor to 1st hour digit
		} else if (!(PINA&0b00000010)) {  // LEFT
 402:	c9 99       	sbic	0x19, 1	; 25
 404:	13 c0       	rjmp	.+38     	; 0x42c <time_editor+0x184>
			while (!(PINA&0b00000010));
 406:	c9 9b       	sbis	0x19, 1	; 25
 408:	fe cf       	rjmp	.-4      	; 0x406 <time_editor+0x15e>
			if (pos!=0) {
 40a:	00 97       	sbiw	r24, 0x00	; 0
 40c:	09 f4       	brne	.+2      	; 0x410 <time_editor+0x168>
 40e:	99 c0       	rjmp	.+306    	; 0x542 <time_editor+0x29a>
				pos--;
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	90 93 c9 00 	sts	0x00C9, r25
 416:	80 93 c8 00 	sts	0x00C8, r24
				if (pos==1) {
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	91 05       	cpc	r25, r1
 41e:	21 f4       	brne	.+8      	; 0x428 <time_editor+0x180>
					send_a_command(0x10);
 420:	80 e1       	ldi	r24, 0x10	; 16
 422:	ba de       	rcall	.-652    	; 0x198 <send_a_command>
					send_a_command(0x10);
 424:	80 e1       	ldi	r24, 0x10	; 16
 426:	b8 de       	rcall	.-656    	; 0x198 <send_a_command>
				}
				send_a_command(0x10);
 428:	80 e1       	ldi	r24, 0x10	; 16
 42a:	11 c0       	rjmp	.+34     	; 0x44e <time_editor+0x1a6>
			}
		} else if (!(PINA&0b00000100)) {  // RIGHT
 42c:	ca 99       	sbic	0x19, 2	; 25
 42e:	11 c0       	rjmp	.+34     	; 0x452 <time_editor+0x1aa>
			while (!(PINA&0b00000100));
 430:	ca 9b       	sbis	0x19, 2	; 25
 432:	fe cf       	rjmp	.-4      	; 0x430 <time_editor+0x188>
			pos++;
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	90 93 c9 00 	sts	0x00C9, r25
 43a:	80 93 c8 00 	sts	0x00C8, r24
			if (pos==2) {
 43e:	82 30       	cpi	r24, 0x02	; 2
 440:	91 05       	cpc	r25, r1
 442:	21 f4       	brne	.+8      	; 0x44c <time_editor+0x1a4>
				send_a_command(0x14);
 444:	84 e1       	ldi	r24, 0x14	; 20
 446:	a8 de       	rcall	.-688    	; 0x198 <send_a_command>
				send_a_command(0x14);
 448:	84 e1       	ldi	r24, 0x14	; 20
 44a:	a6 de       	rcall	.-692    	; 0x198 <send_a_command>
			}
			send_a_command(0x14);
 44c:	84 e1       	ldi	r24, 0x14	; 20
 44e:	a4 de       	rcall	.-696    	; 0x198 <send_a_command>
 450:	78 c0       	rjmp	.+240    	; 0x542 <time_editor+0x29a>
		} else if (!(PINA&0b00001000)) {  // DOWN
 452:	cb 99       	sbic	0x19, 3	; 25
 454:	76 c0       	rjmp	.+236    	; 0x542 <time_editor+0x29a>
			while (!(PINA&0b00001000));
 456:	cb 9b       	sbis	0x19, 3	; 25
 458:	fe cf       	rjmp	.-4      	; 0x456 <time_editor+0x1ae>
			if (pos<2) {
 45a:	82 30       	cpi	r24, 0x02	; 2
 45c:	91 05       	cpc	r25, r1
 45e:	bc f4       	brge	.+46     	; 0x48e <time_editor+0x1e6>
				timezone[2*poyas+pos]--;
 460:	e0 91 c6 00 	lds	r30, 0x00C6
 464:	f0 91 c7 00 	lds	r31, 0x00C7
 468:	ee 0f       	add	r30, r30
 46a:	ff 1f       	adc	r31, r31
 46c:	e8 0f       	add	r30, r24
 46e:	f9 1f       	adc	r31, r25
 470:	ee 0f       	add	r30, r30
 472:	ff 1f       	adc	r31, r31
 474:	e5 55       	subi	r30, 0x55	; 85
 476:	ff 4f       	sbci	r31, 0xFF	; 255
 478:	80 81       	ld	r24, Z
 47a:	91 81       	ldd	r25, Z+1	; 0x01
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	91 83       	std	Z+1, r25	; 0x01
 480:	80 83       	st	Z, r24
				if (timezone[2*poyas+pos]=='A'-1) timezone[2*poyas+pos]='Z';
 482:	80 34       	cpi	r24, 0x40	; 64
 484:	91 05       	cpc	r25, r1
 486:	d9 f4       	brne	.+54     	; 0x4be <time_editor+0x216>
 488:	b1 82       	std	Z+1, r11	; 0x01
 48a:	a0 82       	st	Z, r10
 48c:	18 c0       	rjmp	.+48     	; 0x4be <time_editor+0x216>
			}
			if (pos==2) {
 48e:	82 30       	cpi	r24, 0x02	; 2
 490:	91 05       	cpc	r25, r1
 492:	a9 f4       	brne	.+42     	; 0x4be <time_editor+0x216>
				if (time_difference[poyas]!=0) time_difference[poyas]=(time_difference[poyas]-1)%24;
 494:	e0 91 c6 00 	lds	r30, 0x00C6
 498:	f0 91 c7 00 	lds	r31, 0x00C7
 49c:	ee 0f       	add	r30, r30
 49e:	ff 1f       	adc	r31, r31
 4a0:	ea 52       	subi	r30, 0x2A	; 42
 4a2:	ff 4f       	sbci	r31, 0xFF	; 255
 4a4:	80 81       	ld	r24, Z
 4a6:	91 81       	ldd	r25, Z+1	; 0x01
 4a8:	00 97       	sbiw	r24, 0x00	; 0
 4aa:	39 f0       	breq	.+14     	; 0x4ba <time_editor+0x212>
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	60 2f       	mov	r22, r16
 4b0:	71 2f       	mov	r23, r17
 4b2:	18 d4       	rcall	.+2096   	; 0xce4 <__divmodhi4>
 4b4:	91 83       	std	Z+1, r25	; 0x01
 4b6:	80 83       	st	Z, r24
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <time_editor+0x216>
				else time_difference[poyas]=23;
 4ba:	d1 82       	std	Z+1, r13	; 0x01
 4bc:	c0 82       	st	Z, r12
			}
			DRAW(timezone[2*poyas],timezone[2*poyas+1],(hour+time_difference[poyas])%24);
 4be:	80 91 c6 00 	lds	r24, 0x00C6
 4c2:	90 91 c7 00 	lds	r25, 0x00C7
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	c8 2f       	mov	r28, r24
 4cc:	d9 2f       	mov	r29, r25
 4ce:	cc 0f       	add	r28, r28
 4d0:	dd 1f       	adc	r29, r29
 4d2:	c5 55       	subi	r28, 0x55	; 85
 4d4:	df 4f       	sbci	r29, 0xFF	; 255
 4d6:	e8 2f       	mov	r30, r24
 4d8:	f9 2f       	mov	r31, r25
 4da:	ee 0f       	add	r30, r30
 4dc:	ff 1f       	adc	r31, r31
 4de:	e3 55       	subi	r30, 0x53	; 83
 4e0:	ff 4f       	sbci	r31, 0xFF	; 255
 4e2:	8a 52       	subi	r24, 0x2A	; 42
 4e4:	9f 4f       	sbci	r25, 0xFF	; 255
 4e6:	a8 2f       	mov	r26, r24
 4e8:	b9 2f       	mov	r27, r25
 4ea:	8d 91       	ld	r24, X+
 4ec:	9c 91       	ld	r25, X
 4ee:	20 91 c0 00 	lds	r18, 0x00C0
 4f2:	30 91 c1 00 	lds	r19, 0x00C1
 4f6:	82 0f       	add	r24, r18
 4f8:	93 1f       	adc	r25, r19
 4fa:	60 2f       	mov	r22, r16
 4fc:	71 2f       	mov	r23, r17
 4fe:	f2 d3       	rcall	.+2020   	; 0xce4 <__divmodhi4>
 500:	48 2f       	mov	r20, r24
 502:	59 2f       	mov	r21, r25
 504:	88 81       	ld	r24, Y
 506:	60 81       	ld	r22, Z
 508:	65 de       	rcall	.-822    	; 0x1d4 <DRAW>
			send_a_command(0x0D);
 50a:	8d e0       	ldi	r24, 0x0D	; 13
 50c:	45 de       	rcall	.-886    	; 0x198 <send_a_command>
			for (int i=0;i<calc2(pos);i++)
 50e:	c0 e0       	ldi	r28, 0x00	; 0
 510:	d0 e0       	ldi	r29, 0x00	; 0
 512:	03 c0       	rjmp	.+6      	; 0x51a <time_editor+0x272>
				send_a_command(0x10);  // move cursor to 1st hour digit
 514:	80 e1       	ldi	r24, 0x10	; 16
 516:	40 de       	rcall	.-896    	; 0x198 <send_a_command>
				if (time_difference[poyas]!=0) time_difference[poyas]=(time_difference[poyas]-1)%24;
				else time_difference[poyas]=23;
			}
			DRAW(timezone[2*poyas],timezone[2*poyas+1],(hour+time_difference[poyas])%24);
			send_a_command(0x0D);
			for (int i=0;i<calc2(pos);i++)
 518:	21 96       	adiw	r28, 0x01	; 1
 51a:	80 91 c8 00 	lds	r24, 0x00C8
 51e:	90 91 c9 00 	lds	r25, 0x00C9
 522:	b5 de       	rcall	.-662    	; 0x28e <calc2>
 524:	c8 17       	cp	r28, r24
 526:	d9 07       	cpc	r29, r25
 528:	ac f3       	brlt	.-22     	; 0x514 <time_editor+0x26c>
 52a:	0b c0       	rjmp	.+22     	; 0x542 <time_editor+0x29a>
			if (pos<2) {
				timezone[2*poyas+pos]++;
				if (timezone[2*poyas+pos]=='Z'+1) timezone[2*poyas+pos]='A';
			}
			if (pos==2)	time_difference[poyas]=(time_difference[poyas]+1)%24;
			DRAW(timezone[2*poyas],timezone[2*poyas+1],(hour+time_difference[poyas])%24);
 52c:	08 e1       	ldi	r16, 0x18	; 24
 52e:	10 e0       	ldi	r17, 0x00	; 0
	while (pos!=3) {
		if (!(PINA&0b00000001)) {  // UP
			while (!(PINA&0b00000001));
			if (pos<2) {
				timezone[2*poyas+pos]++;
				if (timezone[2*poyas+pos]=='Z'+1) timezone[2*poyas+pos]='A';
 530:	e1 e4       	ldi	r30, 0x41	; 65
 532:	ee 2e       	mov	r14, r30
 534:	f1 2c       	mov	r15, r1
				timezone[2*poyas+pos]--;
				if (timezone[2*poyas+pos]=='A'-1) timezone[2*poyas+pos]='Z';
			}
			if (pos==2) {
				if (time_difference[poyas]!=0) time_difference[poyas]=(time_difference[poyas]-1)%24;
				else time_difference[poyas]=23;
 536:	77 e1       	ldi	r23, 0x17	; 23
 538:	c7 2e       	mov	r12, r23
 53a:	d1 2c       	mov	r13, r1
			send_a_command(0x14);
		} else if (!(PINA&0b00001000)) {  // DOWN
			while (!(PINA&0b00001000));
			if (pos<2) {
				timezone[2*poyas+pos]--;
				if (timezone[2*poyas+pos]=='A'-1) timezone[2*poyas+pos]='Z';
 53c:	6a e5       	ldi	r22, 0x5A	; 90
 53e:	a6 2e       	mov	r10, r22
 540:	b1 2c       	mov	r11, r1
	send_a_command(0x0D);  // enable the cursor
	DRAW(timezone[2*poyas],timezone[2*poyas+1],(hour+time_difference[poyas])%24);  // draw the time
	send_a_command(0x0D);
	for (int i=0;i<8;i++)
		send_a_command(0x10);  //cursor is on first letter
	while (pos!=3) {
 542:	80 91 c8 00 	lds	r24, 0x00C8
 546:	90 91 c9 00 	lds	r25, 0x00C9
 54a:	83 30       	cpi	r24, 0x03	; 3
 54c:	91 05       	cpc	r25, r1
 54e:	09 f0       	breq	.+2      	; 0x552 <time_editor+0x2aa>
 550:	f0 ce       	rjmp	.-544    	; 0x332 <time_editor+0x8a>
			send_a_command(0x0D);
			for (int i=0;i<calc2(pos);i++)
				send_a_command(0x10);  // move cursor to 1st hour digit
		}
	}
	flag=0;
 552:	10 92 bf 00 	sts	0x00BF, r1
 556:	10 92 be 00 	sts	0x00BE, r1
}
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	ff 90       	pop	r15
 564:	ef 90       	pop	r14
 566:	df 90       	pop	r13
 568:	cf 90       	pop	r12
 56a:	bf 90       	pop	r11
 56c:	af 90       	pop	r10
 56e:	08 95       	ret

00000570 <main>:

int main(void) {
 570:	af 92       	push	r10
 572:	bf 92       	push	r11
 574:	cf 92       	push	r12
 576:	df 92       	push	r13
 578:	ef 92       	push	r14
 57a:	ff 92       	push	r15
 57c:	0f 93       	push	r16
 57e:	1f 93       	push	r17
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
	DDRA=0x00;
 584:	1a ba       	out	0x1a, r1	; 26
	PORTA=0xFF;
 586:	8f ef       	ldi	r24, 0xFF	; 255
 588:	8b bb       	out	0x1b, r24	; 27
	DDRB=0xFF;
 58a:	87 bb       	out	0x17, r24	; 23
    DDRD=0xFF;
 58c:	81 bb       	out	0x11, r24	; 17
    clrscr();
 58e:	6b de       	rcall	.-810    	; 0x266 <clrscr>
	while (PINA&0b00000010 && PINA&0b00000100);
 590:	c9 9b       	sbis	0x19, 1	; 25
 592:	02 c0       	rjmp	.+4      	; 0x598 <main+0x28>
 594:	ca 99       	sbic	0x19, 2	; 25
 596:	fc cf       	rjmp	.-8      	; 0x590 <main+0x20>
	if (!(PINA&0b00000010)) {  // LEFT arrow was pressed and button mode was selected
 598:	c9 99       	sbic	0x19, 1	; 25
 59a:	04 c2       	rjmp	.+1032   	; 0x9a4 <main+0x434>
		while (!(PINA&0b00000010));
 59c:	c9 9b       	sbis	0x19, 1	; 25
 59e:	fe cf       	rjmp	.-4      	; 0x59c <main+0x2c>
		send_a_command(0x0D);
 5a0:	8d e0       	ldi	r24, 0x0D	; 13
 5a2:	fa dd       	rcall	.-1036   	; 0x198 <send_a_command>
		send_a_character('X');
 5a4:	88 e5       	ldi	r24, 0x58	; 88
 5a6:	07 de       	rcall	.-1010   	; 0x1b6 <send_a_character>
		send_a_character('X');
 5a8:	88 e5       	ldi	r24, 0x58	; 88
 5aa:	05 de       	rcall	.-1014   	; 0x1b6 <send_a_character>
		send_a_character(45);
 5ac:	8d e2       	ldi	r24, 0x2D	; 45
 5ae:	03 de       	rcall	.-1018   	; 0x1b6 <send_a_character>
		send_a_character(numbers+temp_time[0]);
 5b0:	90 91 ca 00 	lds	r25, 0x00CA
 5b4:	80 91 bb 00 	lds	r24, 0x00BB
 5b8:	89 0f       	add	r24, r25
 5ba:	fd dd       	rcall	.-1030   	; 0x1b6 <send_a_character>
		send_a_character(numbers+temp_time[1]);
 5bc:	90 91 cc 00 	lds	r25, 0x00CC
 5c0:	80 91 bb 00 	lds	r24, 0x00BB
 5c4:	89 0f       	add	r24, r25
 5c6:	f7 dd       	rcall	.-1042   	; 0x1b6 <send_a_character>
		send_a_character(45);
 5c8:	8d e2       	ldi	r24, 0x2D	; 45
 5ca:	f5 dd       	rcall	.-1046   	; 0x1b6 <send_a_character>
		send_a_character(numbers+temp_time[2]);
 5cc:	90 91 ce 00 	lds	r25, 0x00CE
 5d0:	80 91 bb 00 	lds	r24, 0x00BB
 5d4:	89 0f       	add	r24, r25
 5d6:	ef dd       	rcall	.-1058   	; 0x1b6 <send_a_character>
		send_a_character(numbers+temp_time[3]);
 5d8:	90 91 d0 00 	lds	r25, 0x00D0
 5dc:	80 91 bb 00 	lds	r24, 0x00BB
 5e0:	89 0f       	add	r24, r25
 5e2:	e9 dd       	rcall	.-1070   	; 0x1b6 <send_a_character>
		pos=0;  // position of the cursor
 5e4:	10 92 c9 00 	sts	0x00C9, r1
 5e8:	10 92 c8 00 	sts	0x00C8, r1
		for (int i=0;i<calc(pos);i++)
 5ec:	c0 e0       	ldi	r28, 0x00	; 0
 5ee:	d0 e0       	ldi	r29, 0x00	; 0
 5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <main+0x88>
			send_a_command(0x10);  // move cursor to 1st hour digit
 5f2:	80 e1       	ldi	r24, 0x10	; 16
 5f4:	d1 dd       	rcall	.-1118   	; 0x198 <send_a_command>
		send_a_character(numbers+temp_time[1]);
		send_a_character(45);
		send_a_character(numbers+temp_time[2]);
		send_a_character(numbers+temp_time[3]);
		pos=0;  // position of the cursor
		for (int i=0;i<calc(pos);i++)
 5f6:	21 96       	adiw	r28, 0x01	; 1
 5f8:	80 91 c8 00 	lds	r24, 0x00C8
 5fc:	90 91 c9 00 	lds	r25, 0x00C9
 600:	39 de       	rcall	.-910    	; 0x274 <calc>
 602:	c8 17       	cp	r28, r24
 604:	d9 07       	cpc	r29, r25
 606:	ac f3       	brlt	.-22     	; 0x5f2 <main+0x82>
 608:	83 c1       	rjmp	.+774    	; 0x910 <main+0x3a0>
			send_a_command(0x10);  // move cursor to 1st hour digit

		// cycle that waits until you leave the init menu by pressing RIGHT 4 times in a row
		// you have to input universal time (UTC), that is being used to calculate all other time zones across the globe
		while (pos!=4) {
			if (!(PINA&0b00000001)) {  // UP
 60a:	c8 99       	sbic	0x19, 0	; 25
 60c:	c2 c0       	rjmp	.+388    	; 0x792 <main+0x222>
				while (!(PINA&0b00000001));
 60e:	c8 9b       	sbis	0x19, 0	; 25
 610:	fe cf       	rjmp	.-4      	; 0x60e <main+0x9e>
				temp_time[pos]++;
 612:	e8 2f       	mov	r30, r24
 614:	f9 2f       	mov	r31, r25
 616:	ee 0f       	add	r30, r30
 618:	ff 1f       	adc	r31, r31
 61a:	e6 53       	subi	r30, 0x36	; 54
 61c:	ff 4f       	sbci	r31, 0xFF	; 255
 61e:	20 81       	ld	r18, Z
 620:	31 81       	ldd	r19, Z+1	; 0x01
 622:	2f 5f       	subi	r18, 0xFF	; 255
 624:	3f 4f       	sbci	r19, 0xFF	; 255
 626:	31 83       	std	Z+1, r19	; 0x01
 628:	20 83       	st	Z, r18
				if (pos==0) {
 62a:	00 97       	sbiw	r24, 0x00	; 0
 62c:	01 f5       	brne	.+64     	; 0x66e <main+0xfe>
					if (temp_time[pos]==2 && temp_time[pos+1]>3) temp_time[pos+1]=0;
 62e:	22 30       	cpi	r18, 0x02	; 2
 630:	31 05       	cpc	r19, r1
 632:	59 f4       	brne	.+22     	; 0x64a <main+0xda>
 634:	80 91 cc 00 	lds	r24, 0x00CC
 638:	90 91 cd 00 	lds	r25, 0x00CD
 63c:	84 30       	cpi	r24, 0x04	; 4
 63e:	91 05       	cpc	r25, r1
 640:	24 f0       	brlt	.+8      	; 0x64a <main+0xda>
 642:	10 92 cd 00 	sts	0x00CD, r1
 646:	10 92 cc 00 	sts	0x00CC, r1
					if (temp_time[pos]==3 && temp_time[pos+1]>3) temp_time[pos+1]=0;
 64a:	80 91 ca 00 	lds	r24, 0x00CA
 64e:	90 91 cb 00 	lds	r25, 0x00CB
 652:	83 30       	cpi	r24, 0x03	; 3
 654:	91 05       	cpc	r25, r1
 656:	59 f4       	brne	.+22     	; 0x66e <main+0xfe>
 658:	80 91 cc 00 	lds	r24, 0x00CC
 65c:	90 91 cd 00 	lds	r25, 0x00CD
 660:	84 30       	cpi	r24, 0x04	; 4
 662:	91 05       	cpc	r25, r1
 664:	24 f0       	brlt	.+8      	; 0x66e <main+0xfe>
 666:	10 92 cd 00 	sts	0x00CD, r1
 66a:	10 92 cc 00 	sts	0x00CC, r1
				}
				if (pos==0 && temp_time[pos]==3) {
 66e:	80 91 c8 00 	lds	r24, 0x00C8
 672:	90 91 c9 00 	lds	r25, 0x00C9
 676:	00 97       	sbiw	r24, 0x00	; 0
 678:	b9 f4       	brne	.+46     	; 0x6a8 <main+0x138>
 67a:	20 91 ca 00 	lds	r18, 0x00CA
 67e:	30 91 cb 00 	lds	r19, 0x00CB
 682:	23 30       	cpi	r18, 0x03	; 3
 684:	31 05       	cpc	r19, r1
 686:	e9 f5       	brne	.+122    	; 0x702 <main+0x192>
					temp_time[pos]=0;
 688:	10 92 cb 00 	sts	0x00CB, r1
 68c:	10 92 ca 00 	sts	0x00CA, r1
					if (temp_time[pos+1]>3) temp_time[pos+1]=0;
 690:	20 91 cc 00 	lds	r18, 0x00CC
 694:	30 91 cd 00 	lds	r19, 0x00CD
 698:	24 30       	cpi	r18, 0x04	; 4
 69a:	31 05       	cpc	r19, r1
 69c:	94 f1       	brlt	.+100    	; 0x702 <main+0x192>
 69e:	10 92 cd 00 	sts	0x00CD, r1
 6a2:	10 92 cc 00 	sts	0x00CC, r1
 6a6:	2d c0       	rjmp	.+90     	; 0x702 <main+0x192>
				}
				if (pos==1) {
 6a8:	81 30       	cpi	r24, 0x01	; 1
 6aa:	91 05       	cpc	r25, r1
 6ac:	d9 f4       	brne	.+54     	; 0x6e4 <main+0x174>
					if (temp_time[pos-1]==2) {  // hours/10 == 2
 6ae:	80 91 ca 00 	lds	r24, 0x00CA
 6b2:	90 91 cb 00 	lds	r25, 0x00CB
 6b6:	82 30       	cpi	r24, 0x02	; 2
 6b8:	91 05       	cpc	r25, r1
 6ba:	41 f4       	brne	.+16     	; 0x6cc <main+0x15c>
						if (temp_time[pos]==4) temp_time[pos]=0;
 6bc:	80 91 cc 00 	lds	r24, 0x00CC
 6c0:	90 91 cd 00 	lds	r25, 0x00CD
 6c4:	84 30       	cpi	r24, 0x04	; 4
 6c6:	91 05       	cpc	r25, r1
 6c8:	51 f5       	brne	.+84     	; 0x71e <main+0x1ae>
 6ca:	07 c0       	rjmp	.+14     	; 0x6da <main+0x16a>
					} else {  // hours/10 != 2
						if (temp_time[pos]==10) temp_time[pos]=0;
 6cc:	80 91 cc 00 	lds	r24, 0x00CC
 6d0:	90 91 cd 00 	lds	r25, 0x00CD
 6d4:	8a 30       	cpi	r24, 0x0A	; 10
 6d6:	91 05       	cpc	r25, r1
 6d8:	11 f5       	brne	.+68     	; 0x71e <main+0x1ae>
 6da:	10 92 cd 00 	sts	0x00CD, r1
 6de:	10 92 cc 00 	sts	0x00CC, r1
 6e2:	1d c0       	rjmp	.+58     	; 0x71e <main+0x1ae>
					}
				}
				if (pos==2 && temp_time[pos]==6) temp_time[pos]=0;
 6e4:	82 30       	cpi	r24, 0x02	; 2
 6e6:	91 05       	cpc	r25, r1
 6e8:	61 f4       	brne	.+24     	; 0x702 <main+0x192>
 6ea:	80 91 ce 00 	lds	r24, 0x00CE
 6ee:	90 91 cf 00 	lds	r25, 0x00CF
 6f2:	86 30       	cpi	r24, 0x06	; 6
 6f4:	91 05       	cpc	r25, r1
 6f6:	99 f4       	brne	.+38     	; 0x71e <main+0x1ae>
 6f8:	10 92 cf 00 	sts	0x00CF, r1
 6fc:	10 92 ce 00 	sts	0x00CE, r1
 700:	0e c0       	rjmp	.+28     	; 0x71e <main+0x1ae>
				if (pos==3 && temp_time[pos]==10) temp_time[pos]=0;
 702:	83 30       	cpi	r24, 0x03	; 3
 704:	91 05       	cpc	r25, r1
 706:	59 f4       	brne	.+22     	; 0x71e <main+0x1ae>
 708:	80 91 d0 00 	lds	r24, 0x00D0
 70c:	90 91 d1 00 	lds	r25, 0x00D1
 710:	8a 30       	cpi	r24, 0x0A	; 10
 712:	91 05       	cpc	r25, r1
 714:	21 f4       	brne	.+8      	; 0x71e <main+0x1ae>
 716:	10 92 d1 00 	sts	0x00D1, r1
 71a:	10 92 d0 00 	sts	0x00D0, r1
				hour=temp_time[0]*10+temp_time[1];
 71e:	80 91 ca 00 	lds	r24, 0x00CA
 722:	90 91 cb 00 	lds	r25, 0x00CB
 726:	6a e0       	ldi	r22, 0x0A	; 10
 728:	70 e0       	ldi	r23, 0x00	; 0
 72a:	ca d2       	rcall	.+1428   	; 0xcc0 <__mulhi3>
 72c:	20 91 cc 00 	lds	r18, 0x00CC
 730:	30 91 cd 00 	lds	r19, 0x00CD
 734:	28 0f       	add	r18, r24
 736:	39 1f       	adc	r19, r25
 738:	30 93 c1 00 	sts	0x00C1, r19
 73c:	20 93 c0 00 	sts	0x00C0, r18
				minute=temp_time[2]*10+temp_time[3];
 740:	80 91 ce 00 	lds	r24, 0x00CE
 744:	90 91 cf 00 	lds	r25, 0x00CF
 748:	6a e0       	ldi	r22, 0x0A	; 10
 74a:	70 e0       	ldi	r23, 0x00	; 0
 74c:	b9 d2       	rcall	.+1394   	; 0xcc0 <__mulhi3>
 74e:	40 91 d0 00 	lds	r20, 0x00D0
 752:	50 91 d1 00 	lds	r21, 0x00D1
 756:	48 0f       	add	r20, r24
 758:	59 1f       	adc	r21, r25
 75a:	50 93 c3 00 	sts	0x00C3, r21
 75e:	40 93 c2 00 	sts	0x00C2, r20
				DRAW('X','X',hour);
 762:	88 e5       	ldi	r24, 0x58	; 88
 764:	68 e5       	ldi	r22, 0x58	; 88
 766:	42 2f       	mov	r20, r18
 768:	53 2f       	mov	r21, r19
 76a:	34 dd       	rcall	.-1432   	; 0x1d4 <DRAW>
				send_a_command(0x0D);
 76c:	8d e0       	ldi	r24, 0x0D	; 13
 76e:	14 dd       	rcall	.-1496   	; 0x198 <send_a_command>
				for (int i=0;i<calc(pos);i++)
 770:	ee 24       	eor	r14, r14
 772:	ff 24       	eor	r15, r15
 774:	05 c0       	rjmp	.+10     	; 0x780 <main+0x210>
					send_a_command(0x10);  // move cursor 1 digit left
 776:	80 e1       	ldi	r24, 0x10	; 16
 778:	0f dd       	rcall	.-1506   	; 0x198 <send_a_command>
				if (pos==3 && temp_time[pos]==10) temp_time[pos]=0;
				hour=temp_time[0]*10+temp_time[1];
				minute=temp_time[2]*10+temp_time[3];
				DRAW('X','X',hour);
				send_a_command(0x0D);
				for (int i=0;i<calc(pos);i++)
 77a:	08 94       	sec
 77c:	e1 1c       	adc	r14, r1
 77e:	f1 1c       	adc	r15, r1
 780:	80 91 c8 00 	lds	r24, 0x00C8
 784:	90 91 c9 00 	lds	r25, 0x00C9
 788:	75 dd       	rcall	.-1302   	; 0x274 <calc>
 78a:	e8 16       	cp	r14, r24
 78c:	f9 06       	cpc	r15, r25
 78e:	9c f3       	brlt	.-26     	; 0x776 <main+0x206>
 790:	c9 c0       	rjmp	.+402    	; 0x924 <main+0x3b4>
					send_a_command(0x10);  // move cursor 1 digit left
			} else if (!(PINA&0b00000010)) {  // LEFT
 792:	c9 99       	sbic	0x19, 1	; 25
 794:	11 c0       	rjmp	.+34     	; 0x7b8 <main+0x248>
				while (!(PINA&0b00000010));
 796:	c9 9b       	sbis	0x19, 1	; 25
 798:	fe cf       	rjmp	.-4      	; 0x796 <main+0x226>
				if (pos!=0) {
 79a:	00 97       	sbiw	r24, 0x00	; 0
 79c:	09 f4       	brne	.+2      	; 0x7a0 <main+0x230>
 79e:	c2 c0       	rjmp	.+388    	; 0x924 <main+0x3b4>
					pos--;
 7a0:	01 97       	sbiw	r24, 0x01	; 1
 7a2:	90 93 c9 00 	sts	0x00C9, r25
 7a6:	80 93 c8 00 	sts	0x00C8, r24
					if (pos==1) send_a_command(0x10);
 7aa:	81 30       	cpi	r24, 0x01	; 1
 7ac:	91 05       	cpc	r25, r1
 7ae:	11 f4       	brne	.+4      	; 0x7b4 <main+0x244>
 7b0:	80 e1       	ldi	r24, 0x10	; 16
 7b2:	f2 dc       	rcall	.-1564   	; 0x198 <send_a_command>
					send_a_command(0x10);
 7b4:	80 e1       	ldi	r24, 0x10	; 16
 7b6:	0f c0       	rjmp	.+30     	; 0x7d6 <main+0x266>
				}
			} else if (!(PINA&0b00000100)) {  // RIGHT
 7b8:	ca 99       	sbic	0x19, 2	; 25
 7ba:	0f c0       	rjmp	.+30     	; 0x7da <main+0x26a>
				while (!(PINA&0b00000100));
 7bc:	ca 9b       	sbis	0x19, 2	; 25
 7be:	fe cf       	rjmp	.-4      	; 0x7bc <main+0x24c>
				pos++;
 7c0:	01 96       	adiw	r24, 0x01	; 1
 7c2:	90 93 c9 00 	sts	0x00C9, r25
 7c6:	80 93 c8 00 	sts	0x00C8, r24
				if (pos==2) send_a_command(0x14);
 7ca:	82 30       	cpi	r24, 0x02	; 2
 7cc:	91 05       	cpc	r25, r1
 7ce:	11 f4       	brne	.+4      	; 0x7d4 <main+0x264>
 7d0:	84 e1       	ldi	r24, 0x14	; 20
 7d2:	e2 dc       	rcall	.-1596   	; 0x198 <send_a_command>
				send_a_command(0x14);
 7d4:	84 e1       	ldi	r24, 0x14	; 20
 7d6:	e0 dc       	rcall	.-1600   	; 0x198 <send_a_command>
 7d8:	a5 c0       	rjmp	.+330    	; 0x924 <main+0x3b4>
			} else if (!(PINA&0b00001000)) {  // DOWN
 7da:	cb 99       	sbic	0x19, 3	; 25
 7dc:	a3 c0       	rjmp	.+326    	; 0x924 <main+0x3b4>
				while (!(PINA&0b00001000));
 7de:	cb 9b       	sbis	0x19, 3	; 25
 7e0:	fe cf       	rjmp	.-4      	; 0x7de <main+0x26e>
				temp_time[pos]--;
 7e2:	e8 2f       	mov	r30, r24
 7e4:	f9 2f       	mov	r31, r25
 7e6:	ee 0f       	add	r30, r30
 7e8:	ff 1f       	adc	r31, r31
 7ea:	e6 53       	subi	r30, 0x36	; 54
 7ec:	ff 4f       	sbci	r31, 0xFF	; 255
 7ee:	20 81       	ld	r18, Z
 7f0:	31 81       	ldd	r19, Z+1	; 0x01
 7f2:	21 50       	subi	r18, 0x01	; 1
 7f4:	30 40       	sbci	r19, 0x00	; 0
 7f6:	31 83       	std	Z+1, r19	; 0x01
 7f8:	20 83       	st	Z, r18
				if (pos==0 && temp_time[pos]==-1) {				
 7fa:	00 97       	sbiw	r24, 0x00	; 0
 7fc:	a1 f4       	brne	.+40     	; 0x826 <main+0x2b6>
 7fe:	4f ef       	ldi	r20, 0xFF	; 255
 800:	2f 3f       	cpi	r18, 0xFF	; 255
 802:	34 07       	cpc	r19, r20
 804:	e1 f5       	brne	.+120    	; 0x87e <main+0x30e>
					temp_time[pos]=2;
 806:	b0 92 cb 00 	sts	0x00CB, r11
 80a:	a0 92 ca 00 	sts	0x00CA, r10
					if (temp_time[pos+1]>3) temp_time[pos+1]=3;
 80e:	20 91 cc 00 	lds	r18, 0x00CC
 812:	30 91 cd 00 	lds	r19, 0x00CD
 816:	24 30       	cpi	r18, 0x04	; 4
 818:	31 05       	cpc	r19, r1
 81a:	8c f1       	brlt	.+98     	; 0x87e <main+0x30e>
 81c:	10 93 cd 00 	sts	0x00CD, r17
 820:	00 93 cc 00 	sts	0x00CC, r16
 824:	2c c0       	rjmp	.+88     	; 0x87e <main+0x30e>
				}
				if (pos==1 && temp_time[pos]==-1) {
 826:	81 30       	cpi	r24, 0x01	; 1
 828:	91 05       	cpc	r25, r1
 82a:	c9 f4       	brne	.+50     	; 0x85e <main+0x2ee>
 82c:	80 91 cc 00 	lds	r24, 0x00CC
 830:	90 91 cd 00 	lds	r25, 0x00CD
 834:	6f ef       	ldi	r22, 0xFF	; 255
 836:	8f 3f       	cpi	r24, 0xFF	; 255
 838:	96 07       	cpc	r25, r22
 83a:	81 f5       	brne	.+96     	; 0x89c <main+0x32c>
					if (temp_time[pos-1]==2) temp_time[pos]=3;
 83c:	80 91 ca 00 	lds	r24, 0x00CA
 840:	90 91 cb 00 	lds	r25, 0x00CB
 844:	82 30       	cpi	r24, 0x02	; 2
 846:	91 05       	cpc	r25, r1
 848:	29 f4       	brne	.+10     	; 0x854 <main+0x2e4>
 84a:	10 93 cd 00 	sts	0x00CD, r17
 84e:	00 93 cc 00 	sts	0x00CC, r16
 852:	24 c0       	rjmp	.+72     	; 0x89c <main+0x32c>
					else temp_time[pos]=9;
 854:	d0 93 cd 00 	sts	0x00CD, r29
 858:	c0 93 cc 00 	sts	0x00CC, r28
 85c:	1f c0       	rjmp	.+62     	; 0x89c <main+0x32c>
				}
				if (pos==2 && temp_time[pos]==-1) temp_time[pos]=5;
 85e:	82 30       	cpi	r24, 0x02	; 2
 860:	91 05       	cpc	r25, r1
 862:	69 f4       	brne	.+26     	; 0x87e <main+0x30e>
 864:	80 91 ce 00 	lds	r24, 0x00CE
 868:	90 91 cf 00 	lds	r25, 0x00CF
 86c:	7f ef       	ldi	r23, 0xFF	; 255
 86e:	8f 3f       	cpi	r24, 0xFF	; 255
 870:	97 07       	cpc	r25, r23
 872:	a1 f4       	brne	.+40     	; 0x89c <main+0x32c>
 874:	d0 92 cf 00 	sts	0x00CF, r13
 878:	c0 92 ce 00 	sts	0x00CE, r12
 87c:	0f c0       	rjmp	.+30     	; 0x89c <main+0x32c>
				if (pos==3 && temp_time[pos]==-1) temp_time[pos]=9;
 87e:	83 30       	cpi	r24, 0x03	; 3
 880:	91 05       	cpc	r25, r1
 882:	61 f4       	brne	.+24     	; 0x89c <main+0x32c>
 884:	80 91 d0 00 	lds	r24, 0x00D0
 888:	90 91 d1 00 	lds	r25, 0x00D1
 88c:	af ef       	ldi	r26, 0xFF	; 255
 88e:	8f 3f       	cpi	r24, 0xFF	; 255
 890:	9a 07       	cpc	r25, r26
 892:	21 f4       	brne	.+8      	; 0x89c <main+0x32c>
 894:	d0 93 d1 00 	sts	0x00D1, r29
 898:	c0 93 d0 00 	sts	0x00D0, r28
				hour=temp_time[0]*10+temp_time[1];
 89c:	80 91 ca 00 	lds	r24, 0x00CA
 8a0:	90 91 cb 00 	lds	r25, 0x00CB
 8a4:	6a e0       	ldi	r22, 0x0A	; 10
 8a6:	70 e0       	ldi	r23, 0x00	; 0
 8a8:	0b d2       	rcall	.+1046   	; 0xcc0 <__mulhi3>
 8aa:	20 91 cc 00 	lds	r18, 0x00CC
 8ae:	30 91 cd 00 	lds	r19, 0x00CD
 8b2:	28 0f       	add	r18, r24
 8b4:	39 1f       	adc	r19, r25
 8b6:	30 93 c1 00 	sts	0x00C1, r19
 8ba:	20 93 c0 00 	sts	0x00C0, r18
				minute=temp_time[2]*10+temp_time[3];
 8be:	80 91 ce 00 	lds	r24, 0x00CE
 8c2:	90 91 cf 00 	lds	r25, 0x00CF
 8c6:	6a e0       	ldi	r22, 0x0A	; 10
 8c8:	70 e0       	ldi	r23, 0x00	; 0
 8ca:	fa d1       	rcall	.+1012   	; 0xcc0 <__mulhi3>
 8cc:	40 91 d0 00 	lds	r20, 0x00D0
 8d0:	50 91 d1 00 	lds	r21, 0x00D1
 8d4:	48 0f       	add	r20, r24
 8d6:	59 1f       	adc	r21, r25
 8d8:	50 93 c3 00 	sts	0x00C3, r21
 8dc:	40 93 c2 00 	sts	0x00C2, r20
				DRAW('X','X',hour);
 8e0:	88 e5       	ldi	r24, 0x58	; 88
 8e2:	68 e5       	ldi	r22, 0x58	; 88
 8e4:	42 2f       	mov	r20, r18
 8e6:	53 2f       	mov	r21, r19
 8e8:	75 dc       	rcall	.-1814   	; 0x1d4 <DRAW>
				send_a_command(0x0D);
 8ea:	8d e0       	ldi	r24, 0x0D	; 13
 8ec:	55 dc       	rcall	.-1878   	; 0x198 <send_a_command>
				for (int i=0;i<calc(pos);i++)
 8ee:	ee 24       	eor	r14, r14
 8f0:	ff 24       	eor	r15, r15
 8f2:	05 c0       	rjmp	.+10     	; 0x8fe <main+0x38e>
					send_a_command(0x10);  // move cursor 1 digit left
 8f4:	80 e1       	ldi	r24, 0x10	; 16
 8f6:	50 dc       	rcall	.-1888   	; 0x198 <send_a_command>
				if (pos==3 && temp_time[pos]==-1) temp_time[pos]=9;
				hour=temp_time[0]*10+temp_time[1];
				minute=temp_time[2]*10+temp_time[3];
				DRAW('X','X',hour);
				send_a_command(0x0D);
				for (int i=0;i<calc(pos);i++)
 8f8:	08 94       	sec
 8fa:	e1 1c       	adc	r14, r1
 8fc:	f1 1c       	adc	r15, r1
 8fe:	80 91 c8 00 	lds	r24, 0x00C8
 902:	90 91 c9 00 	lds	r25, 0x00C9
 906:	b6 dc       	rcall	.-1684   	; 0x274 <calc>
 908:	e8 16       	cp	r14, r24
 90a:	f9 06       	cpc	r15, r25
 90c:	9c f3       	brlt	.-26     	; 0x8f4 <main+0x384>
 90e:	0a c0       	rjmp	.+20     	; 0x924 <main+0x3b4>
				if (pos==1 && temp_time[pos]==-1) {
					if (temp_time[pos-1]==2) temp_time[pos]=3;
					else temp_time[pos]=9;
				}
				if (pos==2 && temp_time[pos]==-1) temp_time[pos]=5;
				if (pos==3 && temp_time[pos]==-1) temp_time[pos]=9;
 910:	c9 e0       	ldi	r28, 0x09	; 9
 912:	d0 e0       	ldi	r29, 0x00	; 0
				}
				if (pos==1 && temp_time[pos]==-1) {
					if (temp_time[pos-1]==2) temp_time[pos]=3;
					else temp_time[pos]=9;
				}
				if (pos==2 && temp_time[pos]==-1) temp_time[pos]=5;
 914:	e5 e0       	ldi	r30, 0x05	; 5
 916:	ce 2e       	mov	r12, r30
 918:	d1 2c       	mov	r13, r1
				if (pos==0 && temp_time[pos]==-1) {				
					temp_time[pos]=2;
					if (temp_time[pos+1]>3) temp_time[pos+1]=3;
				}
				if (pos==1 && temp_time[pos]==-1) {
					if (temp_time[pos-1]==2) temp_time[pos]=3;
 91a:	03 e0       	ldi	r16, 0x03	; 3
 91c:	10 e0       	ldi	r17, 0x00	; 0
				send_a_command(0x14);
			} else if (!(PINA&0b00001000)) {  // DOWN
				while (!(PINA&0b00001000));
				temp_time[pos]--;
				if (pos==0 && temp_time[pos]==-1) {				
					temp_time[pos]=2;
 91e:	72 e0       	ldi	r23, 0x02	; 2
 920:	a7 2e       	mov	r10, r23
 922:	b1 2c       	mov	r11, r1
		for (int i=0;i<calc(pos);i++)
			send_a_command(0x10);  // move cursor to 1st hour digit

		// cycle that waits until you leave the init menu by pressing RIGHT 4 times in a row
		// you have to input universal time (UTC), that is being used to calculate all other time zones across the globe
		while (pos!=4) {
 924:	80 91 c8 00 	lds	r24, 0x00C8
 928:	90 91 c9 00 	lds	r25, 0x00C9
 92c:	84 30       	cpi	r24, 0x04	; 4
 92e:	91 05       	cpc	r25, r1
 930:	09 f0       	breq	.+2      	; 0x934 <main+0x3c4>
 932:	6b ce       	rjmp	.-810    	; 0x60a <main+0x9a>
				send_a_command(0x0D);
				for (int i=0;i<calc(pos);i++)
					send_a_command(0x10);  // move cursor 1 digit left
			}
		}
		send_a_command(0x0C);  // disable the cursor
 934:	8c e0       	ldi	r24, 0x0C	; 12
 936:	30 dc       	rcall	.-1952   	; 0x198 <send_a_command>
		hour=(temp_time[0]*10+temp_time[1])%24;
 938:	80 91 ca 00 	lds	r24, 0x00CA
 93c:	90 91 cb 00 	lds	r25, 0x00CB
 940:	6a e0       	ldi	r22, 0x0A	; 10
 942:	70 e0       	ldi	r23, 0x00	; 0
 944:	bd d1       	rcall	.+890    	; 0xcc0 <__mulhi3>
 946:	20 91 cc 00 	lds	r18, 0x00CC
 94a:	30 91 cd 00 	lds	r19, 0x00CD
 94e:	28 0f       	add	r18, r24
 950:	39 1f       	adc	r19, r25
 952:	82 2f       	mov	r24, r18
 954:	93 2f       	mov	r25, r19
 956:	68 e1       	ldi	r22, 0x18	; 24
 958:	70 e0       	ldi	r23, 0x00	; 0
 95a:	c4 d1       	rcall	.+904    	; 0xce4 <__divmodhi4>
 95c:	90 93 c1 00 	sts	0x00C1, r25
 960:	80 93 c0 00 	sts	0x00C0, r24
		minute=temp_time[2]*10+temp_time[3];
 964:	80 91 ce 00 	lds	r24, 0x00CE
 968:	90 91 cf 00 	lds	r25, 0x00CF
 96c:	6a e0       	ldi	r22, 0x0A	; 10
 96e:	70 e0       	ldi	r23, 0x00	; 0
 970:	a7 d1       	rcall	.+846    	; 0xcc0 <__mulhi3>
 972:	20 91 d0 00 	lds	r18, 0x00D0
 976:	30 91 d1 00 	lds	r19, 0x00D1
 97a:	28 0f       	add	r18, r24
 97c:	39 1f       	adc	r19, r25
 97e:	30 93 c3 00 	sts	0x00C3, r19
 982:	20 93 c2 00 	sts	0x00C2, r18
 986:	c4 e0       	ldi	r28, 0x04	; 4
 988:	d0 e0       	ldi	r29, 0x00	; 0

		for (int i=0;i<4;i++) {
			time_editor();
 98a:	8e dc       	rcall	.-1764   	; 0x2a8 <time_editor>
			poyas++;
 98c:	80 91 c6 00 	lds	r24, 0x00C6
 990:	90 91 c7 00 	lds	r25, 0x00C7
 994:	01 96       	adiw	r24, 0x01	; 1
 996:	90 93 c7 00 	sts	0x00C7, r25
 99a:	80 93 c6 00 	sts	0x00C6, r24
 99e:	21 97       	sbiw	r28, 0x01	; 1
		}
		send_a_command(0x0C);  // disable the cursor
		hour=(temp_time[0]*10+temp_time[1])%24;
		minute=temp_time[2]*10+temp_time[3];

		for (int i=0;i<4;i++) {
 9a0:	a1 f7       	brne	.-24     	; 0x98a <main+0x41a>
 9a2:	f3 c0       	rjmp	.+486    	; 0xb8a <main+0x61a>
			time_editor();
			poyas++;
		}
		timer_init();
	} else if (!(PINA&0b00000100)) {  // RIGHT arrow was pressed and uart mode was selected
 9a4:	ca 99       	sbic	0x19, 2	; 25
 9a6:	f2 c0       	rjmp	.+484    	; 0xb8c <main+0x61c>
		uart_init();
 9a8:	e8 db       	rcall	.-2096   	; 0x17a <uart_init>
		uart_puts("Input setup time (HH:MM): ");
 9aa:	80 e6       	ldi	r24, 0x60	; 96
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	50 c0       	rjmp	.+160    	; 0xa50 <main+0x4e0>

		// cycle that repeats until correct input
		while (error) {
			char a;
			for (int i=0;i<4;i++) {
				if (i==2) {
 9b0:	82 30       	cpi	r24, 0x02	; 2
 9b2:	91 05       	cpc	r25, r1
 9b4:	31 f4       	brne	.+12     	; 0x9c2 <main+0x452>
					while (!(USR&(1<<RXC)));
 9b6:	5f 9b       	sbis	0x0b, 7	; 11
 9b8:	fe cf       	rjmp	.-4      	; 0x9b6 <main+0x446>
					a=UDR;
 9ba:	0c b1       	in	r16, 0x0c	; 12
					while ((USR&(1<<UDRE))==0);
 9bc:	5d 9b       	sbis	0x0b, 5	; 11
 9be:	fe cf       	rjmp	.-4      	; 0x9bc <main+0x44c>
					UDR=a;
 9c0:	0c b9       	out	0x0c, r16	; 12
				}
				while (!(USR&(1<<RXC)));
 9c2:	5f 9b       	sbis	0x0b, 7	; 11
 9c4:	fe cf       	rjmp	.-4      	; 0x9c2 <main+0x452>
				uart_time[i]=UDR;
 9c6:	2c b1       	in	r18, 0x0c	; 12
 9c8:	21 93       	st	Z+, r18
				while ((USR&(1<<UDRE))==0);
 9ca:	5d 9b       	sbis	0x0b, 5	; 11
 9cc:	fe cf       	rjmp	.-4      	; 0x9ca <main+0x45a>
				UDR=uart_time[i];
 9ce:	2c b9       	out	0x0c, r18	; 12
		int error=1;

		// cycle that repeats until correct input
		while (error) {
			char a;
			for (int i=0;i<4;i++) {
 9d0:	01 96       	adiw	r24, 0x01	; 1
 9d2:	84 30       	cpi	r24, 0x04	; 4
 9d4:	91 05       	cpc	r25, r1
 9d6:	61 f7       	brne	.-40     	; 0x9b0 <main+0x440>
				while (!(USR&(1<<RXC)));
				uart_time[i]=UDR;
				while ((USR&(1<<UDRE))==0);
				UDR=uart_time[i];
			}
			if (uart_time[0]>='0' && uart_time[0]<='2' && uart_time[1]>='0' &&
 9d8:	80 91 d2 00 	lds	r24, 0x00D2
 9dc:	98 2f       	mov	r25, r24
 9de:	90 53       	subi	r25, 0x30	; 48
 9e0:	93 30       	cpi	r25, 0x03	; 3
 9e2:	a0 f5       	brcc	.+104    	; 0xa4c <main+0x4dc>
 9e4:	20 91 d3 00 	lds	r18, 0x00D3
 9e8:	20 33       	cpi	r18, 0x30	; 48
 9ea:	80 f1       	brcs	.+96     	; 0xa4c <main+0x4dc>
 9ec:	2a 33       	cpi	r18, 0x3A	; 58
 9ee:	70 f5       	brcc	.+92     	; 0xa4c <main+0x4dc>
			uart_time[1]<='9' && uart_time[2]>='0' && uart_time[2]<='9' &&
 9f0:	b0 91 d4 00 	lds	r27, 0x00D4
 9f4:	b0 33       	cpi	r27, 0x30	; 48
 9f6:	50 f1       	brcs	.+84     	; 0xa4c <main+0x4dc>
 9f8:	ba 33       	cpi	r27, 0x3A	; 58
 9fa:	40 f5       	brcc	.+80     	; 0xa4c <main+0x4dc>
			uart_time[3]>='0' && uart_time[3]<='9' && ((uart_time[0]-'0')*10+uart_time[1]-'0')<=23 &&
 9fc:	a0 91 d5 00 	lds	r26, 0x00D5
				uart_time[i]=UDR;
				while ((USR&(1<<UDRE))==0);
				UDR=uart_time[i];
			}
			if (uart_time[0]>='0' && uart_time[0]<='2' && uart_time[1]>='0' &&
			uart_time[1]<='9' && uart_time[2]>='0' && uart_time[2]<='9' &&
 a00:	a0 33       	cpi	r26, 0x30	; 48
 a02:	20 f1       	brcs	.+72     	; 0xa4c <main+0x4dc>
			uart_time[3]>='0' && uart_time[3]<='9' && ((uart_time[0]-'0')*10+uart_time[1]-'0')<=23 &&
 a04:	aa 33       	cpi	r26, 0x3A	; 58
 a06:	10 f5       	brcc	.+68     	; 0xa4c <main+0x4dc>
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	6a e0       	ldi	r22, 0x0A	; 10
 a0c:	70 e0       	ldi	r23, 0x00	; 0
 a0e:	58 d1       	rcall	.+688    	; 0xcc0 <__mulhi3>
 a10:	e8 2f       	mov	r30, r24
 a12:	f9 2f       	mov	r31, r25
 a14:	30 e0       	ldi	r19, 0x00	; 0
 a16:	42 2f       	mov	r20, r18
 a18:	53 2f       	mov	r21, r19
 a1a:	40 5e       	subi	r20, 0xE0	; 224
 a1c:	51 40       	sbci	r21, 0x01	; 1
 a1e:	48 0f       	add	r20, r24
 a20:	59 1f       	adc	r21, r25
 a22:	48 34       	cpi	r20, 0x48	; 72
 a24:	51 05       	cpc	r21, r1
 a26:	94 f4       	brge	.+36     	; 0xa4c <main+0x4dc>
			((uart_time[2]-'0')*10+uart_time[3]-'0')<=59 && a==':') error=0;
 a28:	8b 2f       	mov	r24, r27
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	6a e0       	ldi	r22, 0x0A	; 10
 a2e:	70 e0       	ldi	r23, 0x00	; 0
 a30:	47 d1       	rcall	.+654    	; 0xcc0 <__mulhi3>
 a32:	6a 2f       	mov	r22, r26
 a34:	70 e0       	ldi	r23, 0x00	; 0
 a36:	46 2f       	mov	r20, r22
 a38:	57 2f       	mov	r21, r23
 a3a:	40 5e       	subi	r20, 0xE0	; 224
 a3c:	51 40       	sbci	r21, 0x01	; 1
 a3e:	48 0f       	add	r20, r24
 a40:	59 1f       	adc	r21, r25
				while ((USR&(1<<UDRE))==0);
				UDR=uart_time[i];
			}
			if (uart_time[0]>='0' && uart_time[0]<='2' && uart_time[1]>='0' &&
			uart_time[1]<='9' && uart_time[2]>='0' && uart_time[2]<='9' &&
			uart_time[3]>='0' && uart_time[3]<='9' && ((uart_time[0]-'0')*10+uart_time[1]-'0')<=23 &&
 a42:	4c 36       	cpi	r20, 0x6C	; 108
 a44:	51 05       	cpc	r21, r1
 a46:	14 f4       	brge	.+4      	; 0xa4c <main+0x4dc>
			((uart_time[2]-'0')*10+uart_time[3]-'0')<=59 && a==':') error=0;
 a48:	0a 33       	cpi	r16, 0x3A	; 58
 a4a:	41 f0       	breq	.+16     	; 0xa5c <main+0x4ec>
			if (error) uart_puts("\r\nTry again: ");
 a4c:	8b e7       	ldi	r24, 0x7B	; 123
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	99 db       	rcall	.-2254   	; 0x184 <uart_puts>
		}
		hour=((uart_time[0]-'0')*10+uart_time[1]-'0');
		minute=(uart_time[2]-'0')*10+uart_time[3]-'0';
 a52:	e2 ed       	ldi	r30, 0xD2	; 210
 a54:	f0 e0       	ldi	r31, 0x00	; 0
					send_a_command(0x10);  // move cursor 1 digit left
			}
		}
		send_a_command(0x0C);  // disable the cursor
		hour=(temp_time[0]*10+temp_time[1])%24;
		minute=temp_time[2]*10+temp_time[3];
 a56:	80 e0       	ldi	r24, 0x00	; 0
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	b3 cf       	rjmp	.-154    	; 0x9c2 <main+0x452>
			uart_time[1]<='9' && uart_time[2]>='0' && uart_time[2]<='9' &&
			uart_time[3]>='0' && uart_time[3]<='9' && ((uart_time[0]-'0')*10+uart_time[1]-'0')<=23 &&
			((uart_time[2]-'0')*10+uart_time[3]-'0')<=59 && a==':') error=0;
			if (error) uart_puts("\r\nTry again: ");
		}
		hour=((uart_time[0]-'0')*10+uart_time[1]-'0');
 a5c:	2e 0f       	add	r18, r30
 a5e:	3f 1f       	adc	r19, r31
 a60:	20 51       	subi	r18, 0x10	; 16
 a62:	32 40       	sbci	r19, 0x02	; 2
 a64:	30 93 c1 00 	sts	0x00C1, r19
 a68:	20 93 c0 00 	sts	0x00C0, r18
		minute=(uart_time[2]-'0')*10+uart_time[3]-'0';
 a6c:	86 0f       	add	r24, r22
 a6e:	97 1f       	adc	r25, r23
 a70:	80 51       	subi	r24, 0x10	; 16
 a72:	92 40       	sbci	r25, 0x02	; 2
 a74:	90 93 c3 00 	sts	0x00C3, r25
 a78:	80 93 c2 00 	sts	0x00C2, r24
 a7c:	06 ed       	ldi	r16, 0xD6	; 214
 a7e:	10 e0       	ldi	r17, 0x00	; 0
 a80:	cb ea       	ldi	r28, 0xAB	; 171
 a82:	d0 e0       	ldi	r29, 0x00	; 0
 a84:	61 e3       	ldi	r22, 0x31	; 49
 a86:	c6 2e       	mov	r12, r22
				UDR=hour2;
				if (timezone[i*2]>='A' && timezone[i*2]<='Z' && timezone[i*2+1]>='A' && timezone[i*2+1]<='Z' && a==':' &&
				hour1>='0' && hour1<='9' && hour2>='0' && hour2<='9' && ((hour1-'0')*10+hour2-'0')<=23) error=0;
				if (error) uart_puts("\r\nTry again: ");
			}
			time_difference[i]=((hour1-'0')*10+hour2-'0'-hour+24)%24;
 a88:	58 e0       	ldi	r21, 0x08	; 8
 a8a:	e5 2e       	mov	r14, r21
 a8c:	5e ef       	ldi	r21, 0xFE	; 254
 a8e:	f5 2e       	mov	r15, r21
 a90:	48 e1       	ldi	r20, 0x18	; 24
 a92:	a4 2e       	mov	r10, r20
 a94:	b1 2c       	mov	r11, r1
		hour=((uart_time[0]-'0')*10+uart_time[1]-'0');
		minute=(uart_time[2]-'0')*10+uart_time[3]-'0';

		// cycle that gets 4 correct different time zones and their current time
		for (int i=0;i<4;i++) {
			uart_puts("\n\rInput ");
 a96:	89 e8       	ldi	r24, 0x89	; 137
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	74 db       	rcall	.-2328   	; 0x184 <uart_puts>
			while ((USR&(1<<UDRE))==0);
 a9c:	5d 9b       	sbis	0x0b, 5	; 11
 a9e:	fe cf       	rjmp	.-4      	; 0xa9c <main+0x52c>
			UDR=i+'1';
 aa0:	cc b8       	out	0x0c, r12	; 12
			uart_puts(" name and time (NN:HH): ");
 aa2:	82 e9       	ldi	r24, 0x92	; 146
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	6e db       	rcall	.-2340   	; 0x184 <uart_puts>
			error=1;
			int hour1, hour2;
			while (error) {
				while (!(USR&(1<<RXC)));
 aa8:	5f 9b       	sbis	0x0b, 7	; 11
 aaa:	fe cf       	rjmp	.-4      	; 0xaa8 <main+0x538>
				timezone[i*2]=UDR;
 aac:	8c b1       	in	r24, 0x0c	; 12
 aae:	88 83       	st	Y, r24
 ab0:	19 82       	std	Y+1, r1	; 0x01
				while ((USR&(1<<UDRE))==0);
 ab2:	5d 9b       	sbis	0x0b, 5	; 11
 ab4:	fe cf       	rjmp	.-4      	; 0xab2 <main+0x542>
				UDR=timezone[i*2];
 ab6:	8c b9       	out	0x0c, r24	; 12
				while (!(USR&(1<<RXC)));
 ab8:	5f 9b       	sbis	0x0b, 7	; 11
 aba:	fe cf       	rjmp	.-4      	; 0xab8 <main+0x548>
				timezone[i*2+1]=UDR;
 abc:	8c b1       	in	r24, 0x0c	; 12
 abe:	8a 83       	std	Y+2, r24	; 0x02
 ac0:	1b 82       	std	Y+3, r1	; 0x03
				while ((USR&(1<<UDRE))==0);
 ac2:	5d 9b       	sbis	0x0b, 5	; 11
 ac4:	fe cf       	rjmp	.-4      	; 0xac2 <main+0x552>
				UDR=timezone[i*2+1];
 ac6:	8c b9       	out	0x0c, r24	; 12
				while (!(USR&(1<<RXC)));
 ac8:	5f 9b       	sbis	0x0b, 7	; 11
 aca:	fe cf       	rjmp	.-4      	; 0xac8 <main+0x558>
				char a=UDR;
 acc:	6c b1       	in	r22, 0x0c	; 12
				while ((USR&(1<<UDRE))==0);
 ace:	5d 9b       	sbis	0x0b, 5	; 11
 ad0:	fe cf       	rjmp	.-4      	; 0xace <main+0x55e>
				UDR=a;
 ad2:	6c b9       	out	0x0c, r22	; 12
				while (!(USR&(1<<RXC)));
 ad4:	5f 9b       	sbis	0x0b, 7	; 11
 ad6:	fe cf       	rjmp	.-4      	; 0xad4 <main+0x564>
				hour1=UDR;
 ad8:	2c b1       	in	r18, 0x0c	; 12
 ada:	82 2f       	mov	r24, r18
 adc:	90 e0       	ldi	r25, 0x00	; 0
				while ((USR&(1<<UDRE))==0);
 ade:	5d 9b       	sbis	0x0b, 5	; 11
 ae0:	fe cf       	rjmp	.-4      	; 0xade <main+0x56e>
				UDR=hour1;
 ae2:	2c b9       	out	0x0c, r18	; 12
				while (!(USR&(1<<RXC)));
 ae4:	5f 9b       	sbis	0x0b, 7	; 11
 ae6:	fe cf       	rjmp	.-4      	; 0xae4 <main+0x574>
				hour2=UDR;
 ae8:	4c b1       	in	r20, 0x0c	; 12
 aea:	24 2f       	mov	r18, r20
 aec:	30 e0       	ldi	r19, 0x00	; 0
				while ((USR&(1<<UDRE))==0);
 aee:	5d 9b       	sbis	0x0b, 5	; 11
 af0:	fe cf       	rjmp	.-4      	; 0xaee <main+0x57e>
				UDR=hour2;
 af2:	4c b9       	out	0x0c, r20	; 12
				if (timezone[i*2]>='A' && timezone[i*2]<='Z' && timezone[i*2+1]>='A' && timezone[i*2+1]<='Z' && a==':' &&
 af4:	48 81       	ld	r20, Y
 af6:	59 81       	ldd	r21, Y+1	; 0x01
 af8:	41 54       	subi	r20, 0x41	; 65
 afa:	50 40       	sbci	r21, 0x00	; 0
 afc:	4a 31       	cpi	r20, 0x1A	; 26
 afe:	51 05       	cpc	r21, r1
 b00:	20 f5       	brcc	.+72     	; 0xb4a <main+0x5da>
 b02:	4a 81       	ldd	r20, Y+2	; 0x02
 b04:	5b 81       	ldd	r21, Y+3	; 0x03
 b06:	41 34       	cpi	r20, 0x41	; 65
 b08:	51 05       	cpc	r21, r1
 b0a:	fc f0       	brlt	.+62     	; 0xb4a <main+0x5da>
 b0c:	4b 35       	cpi	r20, 0x5B	; 91
 b0e:	51 05       	cpc	r21, r1
 b10:	e4 f4       	brge	.+56     	; 0xb4a <main+0x5da>
 b12:	6a 33       	cpi	r22, 0x3A	; 58
 b14:	d1 f4       	brne	.+52     	; 0xb4a <main+0x5da>
 b16:	80 33       	cpi	r24, 0x30	; 48
 b18:	91 05       	cpc	r25, r1
 b1a:	bc f0       	brlt	.+46     	; 0xb4a <main+0x5da>
				hour1>='0' && hour1<='9' && hour2>='0' && hour2<='9' && ((hour1-'0')*10+hour2-'0')<=23) error=0;
 b1c:	8a 33       	cpi	r24, 0x3A	; 58
 b1e:	91 05       	cpc	r25, r1
 b20:	a4 f4       	brge	.+40     	; 0xb4a <main+0x5da>
 b22:	20 33       	cpi	r18, 0x30	; 48
 b24:	31 05       	cpc	r19, r1
 b26:	8c f0       	brlt	.+34     	; 0xb4a <main+0x5da>
 b28:	2a 33       	cpi	r18, 0x3A	; 58
 b2a:	31 05       	cpc	r19, r1
 b2c:	74 f4       	brge	.+28     	; 0xb4a <main+0x5da>
 b2e:	6a e0       	ldi	r22, 0x0A	; 10
 b30:	70 e0       	ldi	r23, 0x00	; 0
 b32:	c6 d0       	rcall	.+396    	; 0xcc0 <__mulhi3>
 b34:	48 2f       	mov	r20, r24
 b36:	59 2f       	mov	r21, r25
 b38:	82 2f       	mov	r24, r18
 b3a:	93 2f       	mov	r25, r19
 b3c:	80 5e       	subi	r24, 0xE0	; 224
 b3e:	91 40       	sbci	r25, 0x01	; 1
 b40:	84 0f       	add	r24, r20
 b42:	95 1f       	adc	r25, r21
 b44:	88 34       	cpi	r24, 0x48	; 72
 b46:	91 05       	cpc	r25, r1
 b48:	1c f0       	brlt	.+6      	; 0xb50 <main+0x5e0>
				if (error) uart_puts("\r\nTry again: ");
 b4a:	8b e7       	ldi	r24, 0x7B	; 123
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	ab cf       	rjmp	.-170    	; 0xaa6 <main+0x536>
			}
			time_difference[i]=((hour1-'0')*10+hour2-'0'-hour+24)%24;
 b50:	80 91 c0 00 	lds	r24, 0x00C0
 b54:	90 91 c1 00 	lds	r25, 0x00C1
 b58:	ee 2d       	mov	r30, r14
 b5a:	ff 2d       	mov	r31, r15
 b5c:	e8 1b       	sub	r30, r24
 b5e:	f9 0b       	sbc	r31, r25
 b60:	8e 2f       	mov	r24, r30
 b62:	9f 2f       	mov	r25, r31
 b64:	84 0f       	add	r24, r20
 b66:	95 1f       	adc	r25, r21
 b68:	82 0f       	add	r24, r18
 b6a:	93 1f       	adc	r25, r19
 b6c:	6a 2d       	mov	r22, r10
 b6e:	7b 2d       	mov	r23, r11
 b70:	b9 d0       	rcall	.+370    	; 0xce4 <__divmodhi4>
 b72:	a0 2f       	mov	r26, r16
 b74:	b1 2f       	mov	r27, r17
 b76:	8d 93       	st	X+, r24
 b78:	9d 93       	st	X+, r25
 b7a:	0a 2f       	mov	r16, r26
 b7c:	1b 2f       	mov	r17, r27
 b7e:	24 96       	adiw	r28, 0x04	; 4
 b80:	c3 94       	inc	r12
		}
		hour=((uart_time[0]-'0')*10+uart_time[1]-'0');
		minute=(uart_time[2]-'0')*10+uart_time[3]-'0';

		// cycle that gets 4 correct different time zones and their current time
		for (int i=0;i<4;i++) {
 b82:	bc 2d       	mov	r27, r12
 b84:	b5 33       	cpi	r27, 0x35	; 53
 b86:	09 f0       	breq	.+2      	; 0xb8a <main+0x61a>
 b88:	86 cf       	rjmp	.-244    	; 0xa96 <main+0x526>
				hour1>='0' && hour1<='9' && hour2>='0' && hour2<='9' && ((hour1-'0')*10+hour2-'0')<=23) error=0;
				if (error) uart_puts("\r\nTry again: ");
			}
			time_difference[i]=((hour1-'0')*10+hour2-'0'-hour+24)%24;
		}
		timer_init();
 b8a:	eb da       	rcall	.-2602   	; 0x162 <timer_init>
	}
	poyas=0;
 b8c:	10 92 c7 00 	sts	0x00C7, r1
 b90:	10 92 c6 00 	sts	0x00C6, r1
	DRAW(timezone[2*poyas],timezone[2*poyas+1],(hour+time_difference[poyas])%24);
 b94:	80 91 d6 00 	lds	r24, 0x00D6
 b98:	90 91 d7 00 	lds	r25, 0x00D7
 b9c:	20 91 c0 00 	lds	r18, 0x00C0
 ba0:	30 91 c1 00 	lds	r19, 0x00C1
 ba4:	82 0f       	add	r24, r18
 ba6:	93 1f       	adc	r25, r19
 ba8:	68 e1       	ldi	r22, 0x18	; 24
 baa:	70 e0       	ldi	r23, 0x00	; 0
 bac:	9b d0       	rcall	.+310    	; 0xce4 <__divmodhi4>
 bae:	48 2f       	mov	r20, r24
 bb0:	59 2f       	mov	r21, r25
 bb2:	80 91 ab 00 	lds	r24, 0x00AB
 bb6:	60 91 ad 00 	lds	r22, 0x00AD
 bba:	0c db       	rcall	.-2536   	; 0x1d4 <DRAW>
	while (1) {
		if (!(PINA&0b00000001)) {  // UP
			while (!(PINA&0b00000001));
			poyas++;
			if (poyas==4) poyas=0;
			DRAW(timezone[2*poyas],timezone[2*poyas+1],(hour+time_difference[poyas])%24);
 bbc:	08 e1       	ldi	r16, 0x18	; 24
 bbe:	10 e0       	ldi	r17, 0x00	; 0
			send_a_command(0x0C);
		}
		if (!(PINA&0b00001000)) {  // DOWN
			while (!(PINA&0b00001000));
			poyas--;
			if (poyas==-1) poyas=3;
 bc0:	33 e0       	ldi	r19, 0x03	; 3
 bc2:	e3 2e       	mov	r14, r19
 bc4:	f1 2c       	mov	r15, r1

	// infinite cycle to be clock and wait for potential input:
	// UP or DOWN to change current displayed time zone
	// or RIGHT to enter edit mode of current selected time zone
	while (1) {
		if (!(PINA&0b00000001)) {  // UP
 bc6:	c8 99       	sbic	0x19, 0	; 25
 bc8:	38 c0       	rjmp	.+112    	; 0xc3a <main+0x6ca>
			while (!(PINA&0b00000001));
 bca:	c8 9b       	sbis	0x19, 0	; 25
 bcc:	fe cf       	rjmp	.-4      	; 0xbca <main+0x65a>
			poyas++;
 bce:	80 91 c6 00 	lds	r24, 0x00C6
 bd2:	90 91 c7 00 	lds	r25, 0x00C7
 bd6:	01 96       	adiw	r24, 0x01	; 1
 bd8:	90 93 c7 00 	sts	0x00C7, r25
 bdc:	80 93 c6 00 	sts	0x00C6, r24
			if (poyas==4) poyas=0;
 be0:	84 30       	cpi	r24, 0x04	; 4
 be2:	91 05       	cpc	r25, r1
 be4:	21 f4       	brne	.+8      	; 0xbee <main+0x67e>
 be6:	10 92 c7 00 	sts	0x00C7, r1
 bea:	10 92 c6 00 	sts	0x00C6, r1
			DRAW(timezone[2*poyas],timezone[2*poyas+1],(hour+time_difference[poyas])%24);
 bee:	80 91 c6 00 	lds	r24, 0x00C6
 bf2:	90 91 c7 00 	lds	r25, 0x00C7
 bf6:	88 0f       	add	r24, r24
 bf8:	99 1f       	adc	r25, r25
 bfa:	c8 2f       	mov	r28, r24
 bfc:	d9 2f       	mov	r29, r25
 bfe:	cc 0f       	add	r28, r28
 c00:	dd 1f       	adc	r29, r29
 c02:	c5 55       	subi	r28, 0x55	; 85
 c04:	df 4f       	sbci	r29, 0xFF	; 255
 c06:	e8 2f       	mov	r30, r24
 c08:	f9 2f       	mov	r31, r25
 c0a:	ee 0f       	add	r30, r30
 c0c:	ff 1f       	adc	r31, r31
 c0e:	e3 55       	subi	r30, 0x53	; 83
 c10:	ff 4f       	sbci	r31, 0xFF	; 255
 c12:	8a 52       	subi	r24, 0x2A	; 42
 c14:	9f 4f       	sbci	r25, 0xFF	; 255
 c16:	a8 2f       	mov	r26, r24
 c18:	b9 2f       	mov	r27, r25
 c1a:	8d 91       	ld	r24, X+
 c1c:	9c 91       	ld	r25, X
 c1e:	20 91 c0 00 	lds	r18, 0x00C0
 c22:	30 91 c1 00 	lds	r19, 0x00C1
 c26:	82 0f       	add	r24, r18
 c28:	93 1f       	adc	r25, r19
 c2a:	60 2f       	mov	r22, r16
 c2c:	71 2f       	mov	r23, r17
 c2e:	5a d0       	rcall	.+180    	; 0xce4 <__divmodhi4>
 c30:	48 2f       	mov	r20, r24
 c32:	59 2f       	mov	r21, r25
 c34:	88 81       	ld	r24, Y
 c36:	60 81       	ld	r22, Z
 c38:	cd da       	rcall	.-2662   	; 0x1d4 <DRAW>
		}
		if (!(PINA&0b00000100)) {  // RIGHT
 c3a:	ca 99       	sbic	0x19, 2	; 25
 c3c:	05 c0       	rjmp	.+10     	; 0xc48 <main+0x6d8>
			while (!(PINA&0b00000100));
 c3e:	ca 9b       	sbis	0x19, 2	; 25
 c40:	fe cf       	rjmp	.-4      	; 0xc3e <main+0x6ce>
			time_editor();
 c42:	32 db       	rcall	.-2460   	; 0x2a8 <time_editor>
			send_a_command(0x0C);
 c44:	8c e0       	ldi	r24, 0x0C	; 12
 c46:	a8 da       	rcall	.-2736   	; 0x198 <send_a_command>
		}
		if (!(PINA&0b00001000)) {  // DOWN
 c48:	cb 99       	sbic	0x19, 3	; 25
 c4a:	bd cf       	rjmp	.-134    	; 0xbc6 <main+0x656>
			while (!(PINA&0b00001000));
 c4c:	cb 9b       	sbis	0x19, 3	; 25
 c4e:	fe cf       	rjmp	.-4      	; 0xc4c <main+0x6dc>
			poyas--;
 c50:	80 91 c6 00 	lds	r24, 0x00C6
 c54:	90 91 c7 00 	lds	r25, 0x00C7
 c58:	01 97       	sbiw	r24, 0x01	; 1
 c5a:	90 93 c7 00 	sts	0x00C7, r25
 c5e:	80 93 c6 00 	sts	0x00C6, r24
			if (poyas==-1) poyas=3;
 c62:	bf ef       	ldi	r27, 0xFF	; 255
 c64:	8f 3f       	cpi	r24, 0xFF	; 255
 c66:	9b 07       	cpc	r25, r27
 c68:	21 f4       	brne	.+8      	; 0xc72 <main+0x702>
 c6a:	f0 92 c7 00 	sts	0x00C7, r15
 c6e:	e0 92 c6 00 	sts	0x00C6, r14
			DRAW(timezone[2*poyas],timezone[2*poyas+1],(hour+time_difference[poyas])%24);
 c72:	80 91 c6 00 	lds	r24, 0x00C6
 c76:	90 91 c7 00 	lds	r25, 0x00C7
 c7a:	88 0f       	add	r24, r24
 c7c:	99 1f       	adc	r25, r25
 c7e:	c8 2f       	mov	r28, r24
 c80:	d9 2f       	mov	r29, r25
 c82:	cc 0f       	add	r28, r28
 c84:	dd 1f       	adc	r29, r29
 c86:	c5 55       	subi	r28, 0x55	; 85
 c88:	df 4f       	sbci	r29, 0xFF	; 255
 c8a:	e8 2f       	mov	r30, r24
 c8c:	f9 2f       	mov	r31, r25
 c8e:	ee 0f       	add	r30, r30
 c90:	ff 1f       	adc	r31, r31
 c92:	e3 55       	subi	r30, 0x53	; 83
 c94:	ff 4f       	sbci	r31, 0xFF	; 255
 c96:	8a 52       	subi	r24, 0x2A	; 42
 c98:	9f 4f       	sbci	r25, 0xFF	; 255
 c9a:	a8 2f       	mov	r26, r24
 c9c:	b9 2f       	mov	r27, r25
 c9e:	8d 91       	ld	r24, X+
 ca0:	9c 91       	ld	r25, X
 ca2:	20 91 c0 00 	lds	r18, 0x00C0
 ca6:	30 91 c1 00 	lds	r19, 0x00C1
 caa:	82 0f       	add	r24, r18
 cac:	93 1f       	adc	r25, r19
 cae:	60 2f       	mov	r22, r16
 cb0:	71 2f       	mov	r23, r17
 cb2:	18 d0       	rcall	.+48     	; 0xce4 <__divmodhi4>
 cb4:	48 2f       	mov	r20, r24
 cb6:	59 2f       	mov	r21, r25
 cb8:	88 81       	ld	r24, Y
 cba:	60 81       	ld	r22, Z
 cbc:	8b da       	rcall	.-2794   	; 0x1d4 <DRAW>
 cbe:	83 cf       	rjmp	.-250    	; 0xbc6 <main+0x656>

00000cc0 <__mulhi3>:
 cc0:	55 27       	eor	r21, r21
 cc2:	00 24       	eor	r0, r0

00000cc4 <__mulhi3_loop>:
 cc4:	80 ff       	sbrs	r24, 0
 cc6:	02 c0       	rjmp	.+4      	; 0xccc <__mulhi3_skip1>
 cc8:	06 0e       	add	r0, r22
 cca:	57 1f       	adc	r21, r23

00000ccc <__mulhi3_skip1>:
 ccc:	66 0f       	add	r22, r22
 cce:	77 1f       	adc	r23, r23
 cd0:	61 15       	cp	r22, r1
 cd2:	71 05       	cpc	r23, r1
 cd4:	21 f0       	breq	.+8      	; 0xcde <__mulhi3_exit>
 cd6:	96 95       	lsr	r25
 cd8:	87 95       	ror	r24
 cda:	00 97       	sbiw	r24, 0x00	; 0
 cdc:	99 f7       	brne	.-26     	; 0xcc4 <__mulhi3_loop>

00000cde <__mulhi3_exit>:
 cde:	95 2f       	mov	r25, r21
 ce0:	80 2d       	mov	r24, r0
 ce2:	08 95       	ret

00000ce4 <__divmodhi4>:
 ce4:	97 fb       	bst	r25, 7
 ce6:	09 2e       	mov	r0, r25
 ce8:	07 26       	eor	r0, r23
 cea:	0a d0       	rcall	.+20     	; 0xd00 <__divmodhi4_neg1>
 cec:	77 fd       	sbrc	r23, 7
 cee:	04 d0       	rcall	.+8      	; 0xcf8 <__divmodhi4_neg2>
 cf0:	0c d0       	rcall	.+24     	; 0xd0a <__udivmodhi4>
 cf2:	06 d0       	rcall	.+12     	; 0xd00 <__divmodhi4_neg1>
 cf4:	00 20       	and	r0, r0
 cf6:	1a f4       	brpl	.+6      	; 0xcfe <__divmodhi4_exit>

00000cf8 <__divmodhi4_neg2>:
 cf8:	70 95       	com	r23
 cfa:	61 95       	neg	r22
 cfc:	7f 4f       	sbci	r23, 0xFF	; 255

00000cfe <__divmodhi4_exit>:
 cfe:	08 95       	ret

00000d00 <__divmodhi4_neg1>:
 d00:	f6 f7       	brtc	.-4      	; 0xcfe <__divmodhi4_exit>
 d02:	90 95       	com	r25
 d04:	81 95       	neg	r24
 d06:	9f 4f       	sbci	r25, 0xFF	; 255
 d08:	08 95       	ret

00000d0a <__udivmodhi4>:
 d0a:	aa 1b       	sub	r26, r26
 d0c:	bb 1b       	sub	r27, r27
 d0e:	51 e1       	ldi	r21, 0x11	; 17
 d10:	07 c0       	rjmp	.+14     	; 0xd20 <__udivmodhi4_ep>

00000d12 <__udivmodhi4_loop>:
 d12:	aa 1f       	adc	r26, r26
 d14:	bb 1f       	adc	r27, r27
 d16:	a6 17       	cp	r26, r22
 d18:	b7 07       	cpc	r27, r23
 d1a:	10 f0       	brcs	.+4      	; 0xd20 <__udivmodhi4_ep>
 d1c:	a6 1b       	sub	r26, r22
 d1e:	b7 0b       	sbc	r27, r23

00000d20 <__udivmodhi4_ep>:
 d20:	88 1f       	adc	r24, r24
 d22:	99 1f       	adc	r25, r25
 d24:	5a 95       	dec	r21
 d26:	a9 f7       	brne	.-22     	; 0xd12 <__udivmodhi4_loop>
 d28:	80 95       	com	r24
 d2a:	90 95       	com	r25
 d2c:	68 2f       	mov	r22, r24
 d2e:	79 2f       	mov	r23, r25
 d30:	8a 2f       	mov	r24, r26
 d32:	9b 2f       	mov	r25, r27
 d34:	08 95       	ret

00000d36 <_exit>:
 d36:	f8 94       	cli

00000d38 <__stop_program>:
 d38:	ff cf       	rjmp	.-2      	; 0xd38 <__stop_program>
